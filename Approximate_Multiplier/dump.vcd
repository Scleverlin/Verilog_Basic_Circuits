$date
	Fri Sep  1 00:57:28 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_booth_4_8_bit $end
$var wire 64 ! partial_product [63:0] $end
$var reg 32 " data [31:0] $end
$var reg 4 # segment [3:0] $end
$scope module u0 $end
$var wire 1 $ cout1 $end
$var wire 32 % data [31:0] $end
$var wire 4 & segment [3:0] $end
$var wire 64 ' tmp_1001 [63:0] $end
$var wire 64 ( tmp_1002 [63:0] $end
$var wire 64 ) partial_product_1110 [63:0] $end
$var wire 64 * partial_product_1101 [63:0] $end
$var wire 64 + partial_product_1100 [63:0] $end
$var wire 64 , partial_product_110 [63:0] $end
$var wire 64 - partial_product_1011 [63:0] $end
$var wire 64 . partial_product_101 [63:0] $end
$var wire 64 / partial_product_1002 [63:0] $end
$var wire 64 0 partial_product_1001 [63:0] $end
$var wire 64 1 partial_product_1000 [63:0] $end
$var wire 64 2 partial_product [63:0] $end
$scope module u0 $end
$var wire 64 3 a [63:0] $end
$var wire 64 4 b [63:0] $end
$var wire 1 5 cin $end
$var wire 1 $ cout $end
$var wire 64 6 sum [63:0] $end
$upscope $end
$scope module u1 $end
$var wire 64 7 a [63:0] $end
$var wire 64 8 b [63:0] $end
$var wire 1 9 cin $end
$var wire 1 $ cout $end
$var wire 64 : sum [63:0] $end
$upscope $end
$scope module u2 $end
$var wire 64 ; a [63:0] $end
$var wire 64 < b [63:0] $end
$var wire 1 = cin $end
$var wire 1 $ cout $end
$var wire 64 > sum [63:0] $end
$upscope $end
$scope module u3 $end
$var wire 64 ? a [63:0] $end
$var wire 64 @ b [63:0] $end
$var wire 1 A cin $end
$var wire 1 $ cout $end
$var wire 64 B sum [63:0] $end
$upscope $end
$scope module u4 $end
$var wire 64 C a [63:0] $end
$var wire 64 D b [63:0] $end
$var wire 1 E cin $end
$var wire 1 $ cout $end
$var wire 64 F sum [63:0] $end
$upscope $end
$scope module u5 $end
$var wire 64 G a [63:0] $end
$var wire 64 H b [63:0] $end
$var wire 1 I cin $end
$var wire 1 $ cout $end
$var wire 64 J sum [63:0] $end
$upscope $end
$scope module u6 $end
$var wire 64 K a [63:0] $end
$var wire 64 L b [63:0] $end
$var wire 1 M cin $end
$var wire 1 $ cout $end
$var wire 64 N sum [63:0] $end
$upscope $end
$scope module u7 $end
$var wire 64 O a [63:0] $end
$var wire 64 P b [63:0] $end
$var wire 1 Q cin $end
$var wire 1 $ cout $end
$var wire 64 R sum [63:0] $end
$upscope $end
$scope module u8 $end
$var wire 64 S a [63:0] $end
$var wire 64 T b [63:0] $end
$var wire 1 U cin $end
$var wire 1 $ cout $end
$var wire 64 V sum [63:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx V
1U
b0 T
b11111111111111111111111111111111xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx S
bx R
1Q
b0 P
b11111111111111111111111111111111xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx O
bx N
1M
b0 L
b1111111111111111111111111111111xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1 K
bx J
1I
b0 H
b1111111111111111111111111111111xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1 G
bx F
1E
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx D
b111111111111111111111111111111xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx11 C
bx B
1A
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx @
b111111111111111111111111111111xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx11 ?
bx >
1=
b0 <
b111111111111111111111111111111xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx11 ;
bx :
09
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0 8
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 7
bx 6
05
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0 4
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
b111111111111111111111111111111xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx11 (
b111111111111111111111111111111xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx11 '
bx &
bx %
x$
bx #
bx "
bx !
$end
#10
b1111111111111111111111111111111111111111111111111111101110101000 1
b1111111111111111111111111111111111111111111111111111101110101000 >
0$
b1111111111111111111111111111111111111111111111111111110010111110 0
b1111111111111111111111111111111111111111111111111111110010111110 B
b1111111111111111111111111111111111111111111111111111110010111110 /
b1111111111111111111111111111111111111111111111111111110010111110 F
b1111111111111111111111111111111111111111111111111111110111010100 -
b1111111111111111111111111111111111111111111111111111110111010100 J
b1111111111111111111111111111111111111111111111111111110111010100 +
b1111111111111111111111111111111111111111111111111111110111010100 N
b1111111111111111111111111111111111111111111111111111111011101010 *
b1111111111111111111111111111111111111111111111111111111011101010 R
b1111111111111111111111111111111111111111111111111111111011101010 )
b1111111111111111111111111111111111111111111111111111111011101010 V
b0 !
b0 2
b1101000010 .
b1101000010 6
b1101000010 ,
b1101000010 :
b1111111111111111111111111111111111111111111111111111101110100111 ;
b1111111111111111111111111111111111111111111111111111101110100111 '
b1111111111111111111111111111111111111111111111111111101110100111 ?
b1111111111111111111111111111111111111111111111111111101110100111 (
b1111111111111111111111111111111111111111111111111111101110100111 C
b1111111111111111111111111111111111111111111111111111110111010011 G
b1111111111111111111111111111111111111111111111111111110111010011 K
b1111111111111111111111111111111111111111111111111111111011101001 O
b1111111111111111111111111111111111111111111111111111111011101001 S
b0 #
b0 &
b100010110 3
b1000101100 4
b100010110 7
b1000101100 8
b100010110 @
b100010110 D
b100010110 "
b100010110 %
#30
b100010110 !
b100010110 2
b1 #
b1 &
#50
b10 #
b10 &
#70
b1000101100 !
b1000101100 2
b11 #
b11 &
#90
b100 #
b100 &
#110
b1101000010 !
b1101000010 2
b101 #
b101 &
#130
b110 #
b110 &
#150
b10001011000 !
b10001011000 2
b111 #
b111 &
#170
b1111111111111111111111111111111111111111111111111111101110101000 !
b1111111111111111111111111111111111111111111111111111101110101000 2
b1000 #
b1000 &
#190
b1111111111111111111111111111111111111111111111111111110010111110 !
b1111111111111111111111111111111111111111111111111111110010111110 2
b1001 #
b1001 &
#210
b1010 #
b1010 &
#230
b1111111111111111111111111111111111111111111111111111110111010100 !
b1111111111111111111111111111111111111111111111111111110111010100 2
b1011 #
b1011 &
#250
b1100 #
b1100 &
#270
b1111111111111111111111111111111111111111111111111111111011101010 !
b1111111111111111111111111111111111111111111111111111111011101010 2
b1101 #
b1101 &
#290
b1110 #
b1110 &
#310
b0 !
b0 2
b1111 #
b1111 &
#1000
