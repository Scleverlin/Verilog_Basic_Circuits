$date
	Sat Jan 27 01:11:57 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_bka_16 $end
$var wire 16 ! sum [15:0] $end
$var wire 1 " cout $end
$var parameter 32 # delay $end
$var reg 16 $ a [15:0] $end
$var reg 16 % b [15:0] $end
$var reg 1 & cin $end
$scope module shi $end
$var wire 16 ' a [15:0] $end
$var wire 16 ( b [15:0] $end
$var wire 1 & cin $end
$var wire 16 ) g [15:0] $end
$var wire 1 * ggmux11 $end
$var wire 1 + ggmux22 $end
$var wire 1 , ggmux33 $end
$var wire 1 - ggmux44 $end
$var wire 1 . ppmux11 $end
$var wire 1 / ppmux22 $end
$var wire 1 0 ppmux33 $end
$var wire 1 1 ppmux44 $end
$var wire 16 2 sum [15:0] $end
$var wire 4 3 pplevel4 [3:0] $end
$var wire 4 4 pplevel3 [3:0] $end
$var wire 4 5 pplevel2 [3:0] $end
$var wire 8 6 pplevel1 [7:0] $end
$var wire 16 7 p [15:0] $end
$var wire 4 8 gglevel4 [3:0] $end
$var wire 4 9 gglevel3 [3:0] $end
$var wire 4 : gglevel2 [3:0] $end
$var wire 8 ; gglevel1 [7:0] $end
$var wire 4 < final_p [3:0] $end
$var wire 4 = final_g [3:0] $end
$var wire 1 " cout $end
$scope begin genblk1[1] $end
$var parameter 2 > i $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 ? i $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 @ i $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 A i $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 B i $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 C i $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 D i $end
$upscope $end
$scope begin genblk1[8] $end
$var parameter 5 E i $end
$upscope $end
$scope begin genblk2[1] $end
$var parameter 2 F i $end
$upscope $end
$scope begin genblk2[2] $end
$var parameter 3 G i $end
$upscope $end
$scope begin genblk2[3] $end
$var parameter 3 H i $end
$upscope $end
$scope begin genblk2[4] $end
$var parameter 4 I i $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100 I
b11 H
b10 G
b1 F
b1000 E
b111 D
b110 C
b101 B
b100 A
b11 @
b10 ?
b1 >
b10100 #
$end
#0
$dumpvars
bx =
b0 <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx0 4
bx000 3
bx 2
x1
x0
x/
x.
x-
x,
x+
x*
bx )
bx (
bx '
x&
bx %
bx $
x"
bx !
$end
#10
0"
b0 =
b0 8
b0 3
b0 9
b0 4
0*
b0 :
b0 5
1.
0+
0,
0-
b111 !
b111 2
0/
00
01
b1 6
b0 ;
b111 7
b0 )
0&
b101 %
b101 (
b10 $
b10 '
#30
b10 !
b10 2
0.
b0 6
b0 7
b1 )
b1 %
b1 (
b1 $
b1 '
#50
1*
b101001 !
b101001 2
b10100 )
1&
b10100 %
b10100 (
b10100 $
b10100 '
#70
b1 =
b1 8
b1 9
b1 :
b10010111 !
b10010111 2
b11 ;
0*
1+
b1001011 )
b1001011 %
b1001011 (
b1001011 $
b1001011 '
#90
b10 =
b10 8
b10 9
b10 :
b1000 ;
0+
b100000000 !
b100000000 2
b10000000 )
0&
b10000000 %
b10000000 (
b10000000 $
b10000000 '
#110
b0 =
b0 8
b0 9
b0 :
b11011100 !
b11011100 2
b1010 6
b0 ;
b11011100 7
b0 )
b10100 %
b10100 (
b11001000 $
b11001000 '
#130
b100111011100 !
b100111011100 2
1,
b111011100 7
b10000000000 )
b10111011100 %
b10111011100 (
b10000000000 $
b10000000000 '
#150
b10 =
b10 8
b10 9
b10 :
b111110100000 !
b111110100000 2
b0 6
b11000 ;
1+
b0 7
b11111010000 )
b11111010000 %
b11111010000 (
b11111010000 $
b11111010000 '
#170
b110 =
b110 8
b110 9
b110 :
b10000100110100 !
b10000100110100 2
b100100 6
b11000 ;
1,
b1111010110100 7
b101000000 )
b1100101100100 $
b1100101100100 '
#1000
