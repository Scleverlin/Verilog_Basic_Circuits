$date
	Fri Oct 27 16:00:21 2023
$end

$version
	Synopsys VCS version Q-2020.03-SP1_Full64
$end

$timescale
	1s
$end

$comment Csum: 1 786b0b97e62ec1c4 $end


$scope module tb_SRT_divider_FP32 $end

$scope module uut $end
$var reg 32 ! dividend [31:0] $end
$var reg 32 " divisor [31:0] $end
$var reg 1 # clk $end
$var reg 1 $ rst $end
$var reg 32 % quotient [31:0] $end
$var reg 24 & dividend_mantissa_normalized [23:0] $end
$var reg 24 ' divisor_mantissa_normalized [23:0] $end
$var reg 8 ( current_exponent [7:0] $end
$var reg 1 ) result_sign $end
$var reg 5 * dividend_shift [4:0] $end
$var reg 5 + divisor_shift [4:0] $end
$var reg 5 , final_shift [4:0] $end
$var reg 5 - compl_divisor_shift [4:0] $end
$var reg 5 . compl_dividend_shift [4:0] $end
$var reg 1 / right_shift $end
$var reg 26 0 current_dividend [25:0] $end
$var reg 26 1 current_divisor [25:0] $end
$var reg 26 2 current_remainder [25:0] $end
$var reg 26 3 current_q_d [25:0] $end
$var reg 26 4 next_remainder [25:0] $end
$var reg 26 5 next_remainder_p [25:0] $end
$var reg 26 6 next_remainder_n [25:0] $end
$var reg 26 7 next_remainder_before_shift [25:0] $end
$var reg 5 8 r_idx [4:0] $end
$var reg 5 9 d_idx [4:0] $end
$var reg 3 : mid_quotient [2:0] $end
$var reg 24 ; Q_pos [23:0] $end
$var reg 24 < Q_neg [23:0] $end
$var reg 24 = Q_pos_next [23:0] $end
$var reg 24 > Q_neg_next [23:0] $end
$var reg 24 ; result_before_ieee [23:0] $end

$scope module norm $end
$var reg 32 ! dividend [31:0] $end
$var reg 32 " divisor [31:0] $end
$var reg 24 & dividend_mantissa_normalized [23:0] $end
$var reg 24 ' divisor_mantissa_normalized [23:0] $end
$var reg 8 ( current_exponent [7:0] $end
$var reg 1 ) result_sign $end
$var reg 5 * dividend_shift [4:0] $end
$var reg 5 + divisor_shift [4:0] $end

$scope module mfm $end
$var reg 32 ! dividend [31:0] $end
$var reg 32 " divisor [31:0] $end
$var reg 24 & dividend_mantissa_normalized [23:0] $end
$var reg 24 ' divisor_mantissa_normalized [23:0] $end
$var reg 5 * dividend_shift [4:0] $end
$var reg 5 + divisor_shift [4:0] $end
$var reg 1 ) result_sign $end
$var reg 8 ? dividend_exponent [7:0] $end
$var reg 8 @ divisor_exponent [7:0] $end
$var reg 1 A dividend_sign $end
$var reg 1 B divisor_sign $end
$var reg 23 C dividend_mantissa [22:0] $end
$var reg 23 D divisor_mantissa [22:0] $end
$var reg 24 E dividend_tmp [23:0] $end
$var reg 24 F divisor_tmp [23:0] $end

$scope module mng $end
$var reg 24 E data [23:0] $end
$var reg 24 & outdata [23:0] $end
$var reg 5 * shift [4:0] $end
$upscope $end


$scope module mng2 $end
$var reg 24 F data [23:0] $end
$var reg 24 ' outdata [23:0] $end
$var reg 5 + shift [4:0] $end
$upscope $end

$upscope $end


$scope module exp $end
$var reg 32 ! dividend [31:0] $end
$var reg 32 " divisor [31:0] $end
$var reg 8 ( result_exp [7:0] $end
$var reg 8 G exp_dividend [7:0] $end
$var reg 8 H exp_divisor [7:0] $end
$upscope $end

$upscope $end


$scope module q_selelct_table $end
$var reg 5 I r_idx [4:0] $end
$var reg 5 J d_idx [4:0] $end
$var reg 3 : quotient [2:0] $end
$var reg 2 K q [1:0] $end
$var reg 1 L neg $end
$var wire 1 M ops_sign $end
$var wire 5 N r_ori [4:0] $end
$var wire 5 J d_ori [4:0] $end
$var wire 1 O r_ge_0010 $end
$var wire 1 P r_ge_0011 $end
$var wire 1 Q r_ge_0110 $end
$var wire 1 R r_ge_0111 $end
$var wire 1 S r_ge_1000 $end
$var wire 1 T r_ge_1001 $end
$var wire 1 U r_ge_1010 $end
$var wire 1 V r_ge_1011 $end
$var wire 1 W r_ge_1100 $end
$var reg 1 X q0 $end
$var reg 1 Y q2 $end
$var wire 1 Z r_ge_0100 $end
$var wire 1 [ r_ge_0101 $end
$upscope $end


$scope module qd_gen1 $end
$var reg 26 1 current_divisor [25:0] $end
$var reg 3 : mid_quotient [2:0] $end
$var reg 26 3 current_q_d [25:0] $end
$upscope $end


$scope module next_remainder_gen1 $end
$var reg 26 2 current_remainder [25:0] $end
$var reg 26 3 current_q_d [25:0] $end
$var reg 26 4 next_remainder [25:0] $end
$var reg 3 : mid_quotient [2:0] $end
$var reg 26 \ next_remainder_p [25:0] $end
$var reg 26 ] next_remainder_n [25:0] $end
$var reg 1 ^ cout $end
$var reg 1 _ cout2 $end
$var reg 26 ` next_remainder_before_shift [25:0] $end

$scope module adder_pos $end
$var reg 26 2 a [25:0] $end
$var reg 26 3 b [25:0] $end
$var reg 1 a cin $end
$var reg 26 \ sum [25:0] $end
$var reg 1 ^ cout $end
$upscope $end


$scope module adder_neg $end
$var reg 26 2 a [25:0] $end
$var reg 26 b b [25:0] $end
$var reg 1 c cin $end
$var reg 26 d sum [25:0] $end
$var reg 1 _ cout $end
$upscope $end

$upscope $end


$scope module dut $end
$var reg 24 ; result [23:0] $end
$var reg 5 , shift_nums [4:0] $end
$var reg 1 / right_shift $end
$var reg 1 ) resultsign $end
$var reg 8 ( current_exponent [7:0] $end
$var reg 32 % quotient [31:0] $end
$var reg 24 e result_temp [23:0] $end
$var reg 5 f exponent_addend [4:0] $end
$var reg 24 g result_shifted [23:0] $end
$var reg 8 h exponent_final [7:0] $end
$var reg 8 i addend_copmplement [7:0] $end

$scope module mngen $end
$var reg 24 e data [23:0] $end
$var reg 24 g outdata [23:0] $end
$var reg 5 f shift [4:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end

#0
$dumpvars
x_
0L
0M
1X
0Y
xO
xP
xZ
x[
xQ
xR
xS
xT
xU
xV
xW
x/
x)
xA
xB
x^
b000000000000000000000000 <
b000000000000000000000011 >
b000000000000000000000000 ;
b000000000000000000000000 =
bxxxxxxxx i
bxxxxx .
bxxxxx -
bxxxxxxxx (
b00000000000000000000000000 3
b00xxxxxxxxxxxxxxxxxxxxxxxx 2
b0xxxx J
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx !
bxxxxxxxxxxxxxxxxxxxxxxxx &
bxxxxx *
bxxxxxxxxxxxxxxxxxxxxxxxx E
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx "
bxxxxxxxxxxxxxxxxxxxxxxxx '
bxxxxx +
bxxxxxxxxxxxxxxxxxxxxxxxx F
bxxxxxxxx G
bxxxxxxxx H
bxxxxx f
bxxxxx ,
b000 :
b00 K
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx %
b00xxx I
b00xxx N
bxxxxxxxxxxxxxxxxxxxxxxxx e
bxxxxxxxx h
bxxxxx 8
bxxxxxxxxxxxxxxxxxxxxxxxxxx ]
bxxxxxxxxxxxxxxxxxxxxxxxxxx 1
bxxxxxxxxxxxxxxxxxxxxxxxxxx `
bxxxxxxxxxxxxxxxxxxxxxxxxxx 4
bxxxxxxxxxxxxxxxxxxxxxxxxxx d
bxxxxxxxxxxxxxxxxxxxxxxxxxx \
bxxxxxxxxxxxxxxxxxxxxxxxxxx b
bxxxxxxxxxxxxxxxxxxxxxxxx g
bxxxxxxxx ?
bxxxxxxxxxxxxxxxxxxxxxxx C
bxxxxxxxx @
bxxxxxxxxxxxxxxxxxxxxxxx D
bxxxxxxxxxxxxxxxxxxxxxxxxxx 0
bxxxxx 9
1c
0a
bxxxxxxxxxxxxxxxxxxxxxxxxxx 7
bxxxxxxxxxxxxxxxxxxxxxxxxxx 6
bxxxxxxxxxxxxxxxxxxxxxxxxxx 5
0#
0$
$end
b0xxxx 9
b00xxx 8
b11111111111111111111111111 b
bxxxxxxxxxxxxxxxxxxxxxxxx00 4
b00xxxxxxxxxxxxxxxxxxxxxxxx 0
b00xxxxxxxxxxxxxxxxxxxxxxxx 1
#5
1#
#10
1$
0#
#15
1#
bxxxxxxxxxxxxxxxxxxxxxxxx00 2
bxxxxx 8
xM
bxxxxx I
b000000000000000000000011 <
bxxxxx N
b000000000000000000001111 >
#20
b01000000100000000000000000000000 !
b10000001 ?
0A
b00000000000000000000000 C
b10000001 G
b01000000000000000000000000000000 "
b10000000 @
0B
b00000000000000000000000 D
0)
b10000000 H
b10000000 (
0#
b100000000000000000000000 E
b100000000000000000000000 F
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx %
b00000 *
b100000000000000000000000 &
b00100000000000000000000000 0
b00000 .
b00000 +
b100000000000000000000000 '
b00100000000000000000000000 1
b01000 9
b01000 J
b00000 -
xX
b0x K
xL
xY
bxx K
b00000 ,
bxxx :
b000000000000000000000000 e
b00000000000000000000xxxx >
b0xx00000000000000000000000 3
b1xx11111111111111111111111 b
b00000000000000000000xxxx =
b00000 f
b000000000000000000000000 g
b00000000 i
b10000000 h
b01000000000000000000000000000000 %
#25
1#
b00000000000000000000xxxx ;
b00000000000000000000xxxx <
b000000000000000000xxxxxx =
b000000000000000000xxxxxx >
b00000000000000000000xxxx e
b00000000000000000000xxxx g
bx0xxx f
bxxxxxxxxxxxxxxxxxxxxxxxx g
bxxxxxxxx i
bxxxxxxxx h
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx %
#30
0$
0#
b00100000000000000000000000 2
b00100 8
0M
0L
b00100 I
b000000000000000000000000 ;
b000000000000000000000000 <
b0xx :
b00100 N
1O
1P
1Z
0[
0Q
0R
0S
0T
0U
0V
0W
b000000000000000000000000 e
b0000000000000000000000xx =
b0000000000000000000000xx >
0X
0Y
b01 K
b00000 f
b000000000000000000000000 g
b00000000 i
b10000000 h
b001 :
b01000000000000000000000000000000 %
b00100000000000000000000000 3
b11011111111111111111111111 b
b00000000000000000000000000 ]
b00000000000000000000000000 d
1_
b01000000000000000000000000 `
0^
b01000000000000000000000000 \
b00000000000000000000000000 4
b000000000000000000000000 >
b000000000000000000000001 =
#35
1#
#40
1$
0#
#45
1#
b00000000000000000000000000 2
b00000 8
b11100000000000000000000000 ]
b11100000000000000000000000 d
b00000 I
0_
b00100000000000000000000000 `
b00100000000000000000000000 \
b10000000000000000000000000 4
b000000000000000000000001 ;
b00000 N
0O
0P
0Z
b000000000000000000000101 =
b000000000000000000000100 >
b000000000000000000000001 e
b000000000000000000000001 g
1X
b00 K
b10111 f
b100000000000000000000000 g
b11101001 i
b01101001 h
b00110100100000000000000000000000 %
b000 :
b000000000000000000000011 >
b00000000000000000000000000 3
b11111111111111111111111111 b
b00000000000000000000000000 ]
b00000000000000000000000000 d
1_
b00000000000000000000000000 `
b00000000000000000000000000 \
b00000000000000000000000000 4
b000000000000000000000100 =
#50
0#
#55
1#
b000000000000000000000100 ;
b000000000000000000000011 <
b000000000000000000010000 =
b000000000000000000000100 e
b000000000000000000000000 g
b000000000000000000001111 >
b10101 f
b100000000000000000000000 g
b11101011 i
b01101011 h
b00110101100000000000000000000000 %
#60
0#
#65
1#
b000000000000000000010000 ;
b000000000000000000001111 <
b000000000000000001000000 =
b000000000000000000010000 e
b000000000000000000000000 g
b000000000000000000111111 >
b10011 f
b100000000000000000000000 g
b11101101 i
b01101101 h
b00110110100000000000000000000000 %
#70
0#
#75
1#
b000000000000000001000000 ;
b000000000000000000111111 <
b000000000000000100000000 =
b000000000000000001000000 e
b000000000000000000000000 g
b000000000000000011111111 >
b10001 f
b100000000000000000000000 g
b11101111 i
b01101111 h
b00110111100000000000000000000000 %
#80
0#
#85
1#
b000000000000000100000000 ;
b000000000000000011111111 <
b000000000000010000000000 =
b000000000000000100000000 e
b000000000000000000000000 g
b000000000000001111111111 >
b01111 f
b100000000000000000000000 g
b11110001 i
b01110001 h
b00111000100000000000000000000000 %
#90
0#
#95
1#
b000000000000010000000000 ;
b000000000000001111111111 <
b000000000001000000000000 =
b000000000000010000000000 e
b000000000000000000000000 g
b000000000000111111111111 >
b01101 f
b100000000000000000000000 g
b11110011 i
b01110011 h
b00111001100000000000000000000000 %
#100
0#
#105
1#
b000000000001000000000000 ;
b000000000000111111111111 <
b000000000100000000000000 =
b000000000001000000000000 e
b000000000000000000000000 g
b000000000011111111111111 >
b01011 f
b100000000000000000000000 g
b11110101 i
b01110101 h
b00111010100000000000000000000000 %
#110
0#
#115
1#
b000000000100000000000000 ;
b000000000011111111111111 <
b000000010000000000000000 =
b000000000100000000000000 e
b000000000000000000000000 g
b000000001111111111111111 >
b01001 f
b100000000000000000000000 g
b11110111 i
b01110111 h
b00111011100000000000000000000000 %
#120
0#
#125
1#
b000000010000000000000000 ;
b000000001111111111111111 <
b000001000000000000000000 =
b000000010000000000000000 e
b000000000000000000000000 g
b000000111111111111111111 >
b00111 f
b100000000000000000000000 g
b11111001 i
b01111001 h
b00111100100000000000000000000000 %
#130
0#
#135
1#
b000001000000000000000000 ;
b000000111111111111111111 <
b000100000000000000000000 =
b000001000000000000000000 e
b000000000000000000000000 g
b000011111111111111111111 >
b00101 f
b100000000000000000000000 g
b11111011 i
b01111011 h
b00111101100000000000000000000000 %
#140
0#
#145
1#
b000100000000000000000000 ;
b000011111111111111111111 <
b010000000000000000000000 =
b000100000000000000000000 e
b000000000000000000000000 g
b001111111111111111111111 >
b00011 f
b100000000000000000000000 g
b11111101 i
b01111101 h
b00111110100000000000000000000000 %
#150
0#
#155
1#
b010000000000000000000000 ;
b001111111111111111111111 <
b000000000000000000000000 =
b010000000000000000000000 e
b000000000000000000000000 g
b111111111111111111111111 >
b00001 f
b100000000000000000000000 g
b11111111 i
b01111111 h
b00111111100000000000000000000000 %
#160
0#
#165
1#
b000000000000000000000000 ;
b111111111111111111111111 <
b000000000000000000000000 e
b000000000000000000000000 g
b00000 f
b00000000 i
b10000000 h
b01000000000000000000000000000000 %
#170
0#
#175
1#
#180
0#
#185
1#
#190
0#
#195
1#
#200
0#
#205
1#
#210
0#
#215
1#
#220
0#
#225
1#
#230
0#
#235
1#
