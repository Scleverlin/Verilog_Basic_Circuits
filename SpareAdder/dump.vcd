$date
	Fri Jan 26 20:09:48 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_bka_16 $end
$var wire 16 ! sum [15:0] $end
$var wire 1 " cout $end
$var parameter 32 # delay $end
$var reg 16 $ a [15:0] $end
$var reg 16 % b [15:0] $end
$var reg 1 & cin $end
$scope module shi $end
$var wire 16 ' a [15:0] $end
$var wire 16 ( b [15:0] $end
$var wire 1 & cin $end
$var wire 16 ) g [15:0] $end
$var wire 1 * ggmux1 $end
$var wire 1 + ggmux11 $end
$var wire 1 , ggmux2 $end
$var wire 1 - ggmux22 $end
$var wire 1 . ggmux3 $end
$var wire 1 / ggmux33 $end
$var wire 1 0 ggmux4 $end
$var wire 1 1 ggmux44 $end
$var wire 16 2 p [15:0] $end
$var wire 1 3 ppmux1 $end
$var wire 1 4 ppmux11 $end
$var wire 1 5 ppmux2 $end
$var wire 1 6 ppmux22 $end
$var wire 1 7 ppmux3 $end
$var wire 1 8 ppmux33 $end
$var wire 1 9 ppmux4 $end
$var wire 1 : ppmux44 $end
$var wire 16 ; sum [15:0] $end
$var wire 4 < pplevel4 [3:0] $end
$var wire 4 = pplevel3 [3:0] $end
$var wire 4 > pplevel2 [3:0] $end
$var wire 8 ? pplevel1 [7:0] $end
$var wire 4 @ gglevel4 [3:0] $end
$var wire 4 A gglevel3 [3:0] $end
$var wire 4 B gglevel2 [3:0] $end
$var wire 8 C gglevel1 [7:0] $end
$var wire 4 D final_p [3:0] $end
$var wire 4 E final_g [3:0] $end
$var wire 1 " cout $end
$scope begin genblk1[1] $end
$var parameter 2 F i $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 G i $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 H i $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 I i $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 J i $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 K i $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 L i $end
$upscope $end
$scope begin genblk1[8] $end
$var parameter 5 M i $end
$upscope $end
$scope begin genblk2[1] $end
$var parameter 2 N i $end
$upscope $end
$scope begin genblk2[2] $end
$var parameter 3 O i $end
$upscope $end
$scope begin genblk2[3] $end
$var parameter 3 P i $end
$upscope $end
$scope begin genblk2[4] $end
$var parameter 4 Q i $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100 Q
b11 P
b10 O
b1 N
b1000 M
b111 L
b110 K
b101 J
b100 I
b11 H
b10 G
b1 F
b10100 #
$end
#0
$dumpvars
bx E
b0 D
bx C
bx B
bx A
bx @
bx ?
bx >
bx0 =
bx000 <
bx ;
x:
x9
x8
x7
x6
x5
x4
x3
bx 2
x1
x0
x/
x.
x-
x,
x+
x*
bx )
bx (
bx '
x&
bx %
bx $
x"
bx !
$end
#10
0"
b0 E
b0 @
b0 <
b0 A
b0 =
b0 B
b0 >
03
14
15
16
17
18
19
1:
1*
1+
1,
1-
1.
1/
10
11
b1 ?
b1111 !
b1111 ;
b0 C
b111 2
b0 )
0&
b101 %
b101 (
b10 $
b10 '
#30
13
b0 ?
b0 !
b0 ;
b0 2
b1 )
b1 %
b1 (
b1 $
b1 '
#50
0*
b1 !
b1 ;
b10100 )
1&
b10100 %
b10100 (
b10100 $
b10100 '
#70
b1 E
b1 @
b1 A
b10001 !
b10001 ;
b1 B
1*
0+
0,
b11 C
b1001011 )
b1001011 %
b1001011 (
b1001011 $
b1001011 '
#90
b10 E
b10 @
b10 A
b10 B
1+
1,
0-
b1000 C
b110000000 !
b110000000 ;
b10000000 )
0&
b10000000 %
b10000000 (
b10000000 $
b10000000 '
#110
b0 E
b0 @
b0 A
b0 B
04
06
1-
b1010 ?
b110111000 !
b110111000 ;
b0 C
b11011100 2
b0 )
b10100 %
b10100 (
b11001000 $
b11001000 '
#130
b11110111000 !
b11110111000 ;
0.
b111011100 2
b10000000000 )
b10111011100 %
b10111011100 (
b10000000000 $
b10000000000 '
#150
b10 E
b10 @
b10 A
b10 B
14
16
0,
0-
b0 ?
b111000000 !
b111000000 ;
b11000 C
b0 2
b11111010000 )
b11111010000 %
b11111010000 (
b11111010000 $
b11111010000 '
#170
b110 E
b110 @
b110 A
b110 B
07
08
0-
1.
b100100 ?
b10000010101000 !
b10000010101000 ;
b11000 C
b1111010110100 2
b101000000 )
b1100101100100 $
b1100101100100 '
#1000
