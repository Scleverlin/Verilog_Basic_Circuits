$date
	Fri Jan 27 13:55:42 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_control_unit $end
$var wire 1 ! signal_extension $end
$var wire 5 " rt [4:0] $end
$var wire 5 # rs [4:0] $end
$var wire 5 $ rd [4:0] $end
$var wire 1 % ram_write $end
$var wire 1 & ram_load $end
$var wire 32 ' ram_addr [31:0] $end
$var wire 16 ( jump_offset [15:0] $end
$var wire 1 ) jump $end
$var wire 32 * imm [31:0] $end
$var wire 3 + alu_func [2:0] $end
$var reg 32 , instruction [31:0] $end
$scope module cu $end
$var wire 32 - instruction [31:0] $end
$var wire 32 . temp_imm [31:0] $end
$var wire 1 ! signal_extension $end
$var wire 1 % ram_write $end
$var wire 1 & ram_load $end
$var wire 1 ) jump $end
$var wire 4 / case_test [3:0] $end
$var wire 3 0 alu_func [2:0] $end
$var reg 32 1 imm [31:0] $end
$var reg 16 2 jump_offset [15:0] $end
$var reg 32 3 ram_addr [31:0] $end
$var reg 5 4 rd [4:0] $end
$var reg 5 5 rs [4:0] $end
$var reg 5 6 rt [4:0] $end
$scope module dec $end
$var wire 1 7 add $end
$var wire 1 8 addi $end
$var wire 1 9 alu_op_value $end
$var wire 1 : and_op $end
$var wire 1 ; andi $end
$var wire 4 < func [3:0] $end
$var wire 1 = jump_op $end
$var wire 1 > lw $end
$var wire 6 ? op [5:0] $end
$var wire 1 @ or_op $end
$var wire 1 A ori $end
$var wire 1 B slt $end
$var wire 1 C slti $end
$var wire 1 D sub $end
$var wire 1 E sw $end
$var wire 1 % ram_write $end
$var wire 1 & ram_load $end
$var wire 5 F r_case_test [4:0] $end
$var wire 1 ) jump $end
$var wire 1 ! imm_enable $end
$var wire 7 G case_test [6:0] $end
$var reg 3 H alu_func [2:0] $end
$var reg 1 I imm_enable_true $end
$var reg 1 J jump_true $end
$var reg 1 K ram_load_true $end
$var reg 1 L ram_write_true $end
$upscope $end
$scope module ext_for_control_unit $end
$var wire 16 M input_imm [15:0] $end
$var wire 32 N output_imm [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx N
bx M
xL
xK
xJ
xI
bx H
bx G
bx F
xE
xD
xC
xB
xA
x@
bx ?
x>
x=
bx <
x;
x:
x9
x8
x7
b0 6
b0 5
b0 4
bx 3
b0 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
x)
b0 (
bx '
x&
x%
b0 $
b0 #
b0 "
x!
$end
#10
b1 "
b1 6
b1 *
b1 1
1!
0&
0)
b1 /
0%
1I
b1 +
b1 0
b1 H
0K
0J
0L
18
09
0;
0@
0C
0=
07
0D
0:
b0 F
0B
0A
0E
b1000000 G
0>
b1 .
b1 N
b1000 ?
b1 <
b1 M
b100000000000010000000000000001 ,
b100000000000010000000000000001 -
#20
b10 $
b10 4
b0 /
0!
0I
b1 +
b1 0
b1 H
b1000000100000 *
b1000000100000 1
b1 "
b1 6
19
b0 G
08
b10000 F
17
b1000000100000 .
b1000000100000 N
b0 ?
b0 <
b1000000100000 M
b10001000000100000 ,
b10001000000100000 -
#30
b10 *
b10 1
b1 /
1!
1I
b100 +
b100 0
b100 H
b1 #
b1 5
b0 $
b0 4
b100 "
b100 6
b10000 G
1A
07
09
b1000 F
1D
b10 .
b10 N
b1101 ?
b10 <
b10 M
b110100001001000000000000000010 ,
b110100001001000000000000000010 -
#40
b10 '
b10 3
1%
b100 /
0!
1L
0I
b0 +
b0 0
b0 H
b1 *
b1 1
b100 "
b100 6
b0 #
b0 5
1E
b100 G
0A
b0 F
0D
b1 .
b1 N
b101011 ?
b1 <
b1 M
b10101100001001000000000000000001 ,
b10101100001001000000000000000001 -
#50
b11 (
b11 2
1)
b10 /
0%
1J
0L
b11 '
b11 3
b0 "
b0 6
1=
b1 G
0E
b11 .
b11 N
b10 ?
b11 <
b11 M
b1000000000000000000000000011 ,
b1000000000000000000000000011 -
#100
