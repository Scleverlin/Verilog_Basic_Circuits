$date
	Thu Jan 26 18:34:56 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_decoder $end
$var wire 1 ! ram_write $end
$var wire 1 " ram_load $end
$var wire 1 # jump $end
$var wire 3 $ alu_func [2:0] $end
$var reg 4 % func [3:0] $end
$var reg 6 & op [5:0] $end
$scope module u1 $end
$var wire 1 ' add $end
$var wire 1 ( addi $end
$var wire 1 ) alu_op_value $end
$var wire 1 * and_op $end
$var wire 1 + andi $end
$var wire 4 , func [3:0] $end
$var wire 1 - jump_op $end
$var wire 1 . lw $end
$var wire 6 / op [5:0] $end
$var wire 1 0 or_op $end
$var wire 1 1 ori $end
$var wire 1 2 slt $end
$var wire 1 3 slti $end
$var wire 1 4 sub $end
$var wire 1 5 sw $end
$var wire 1 ! ram_write $end
$var wire 1 " ram_load $end
$var wire 5 6 r_case_test [4:0] $end
$var wire 1 # jump $end
$var wire 7 7 case_test [6:0] $end
$var reg 3 8 alu_func [2:0] $end
$var reg 1 9 jump_true $end
$var reg 1 : ram_load_true $end
$var reg 1 ; ram_write_true $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x;
x:
x9
bx 8
bx 7
bx 6
x5
x4
x3
x2
x1
x0
bx /
x.
x-
bx ,
x+
x*
x)
x(
x'
bx &
bx %
bx $
x#
x"
x!
$end
#10
0"
0#
0!
b1 $
b1 8
0:
09
0;
1)
1'
0(
0*
0+
04
02
03
0-
b10000 6
00
01
05
b0 7
0.
b0 %
b0 ,
b0 &
b0 /
#30
1#
19
b0 $
b0 8
0)
b0 6
0'
b1 7
1-
b1 %
b1 ,
b10 &
b10 /
#40
0#
b10 $
b10 8
09
1)
0'
b1000 6
14
b0 7
0-
b10 %
b10 ,
b0 &
b0 /
#50
b100 $
b100 8
b10000 7
11
b0 6
04
0)
b1111 %
b1111 ,
b1101 &
b1101 /
#60
1!
1;
b0 $
b0 8
15
b100 7
01
b1011 %
b1011 ,
b101011 &
b101011 /
#70
1"
0!
1:
0;
1.
b10 7
05
b100011 &
b100011 /
#100
