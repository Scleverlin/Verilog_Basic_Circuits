$date
	Fri Jan 27 17:37:21 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module regfile $end
$var wire 1 ! clk $end
$var wire 32 " input_data [31:0] $end
$var wire 5 # rd [4:0] $end
$var wire 5 $ rs [4:0] $end
$var wire 1 % rst $end
$var wire 5 & rt [4:0] $end
$var wire 1 ' write $end
$var reg 32 ( rs_data [31:0] $end
$var reg 32 ) rt_data [31:0] $end
$var integer 32 * i [31:0] $end
$upscope $end
$scope module tb_running $end
$var reg 1 + clk $end
$var reg 1 , rst $end
$scope module m1 $end
$var wire 32 - a [31:0] $end
$var wire 1 + clk $end
$var wire 1 , rst $end
$var wire 1 . write $end
$var wire 5 / tmp_rd [4:0] $end
$var wire 1 0 signal_extension $end
$var wire 32 1 rt_data [31:0] $end
$var wire 5 2 rt [4:0] $end
$var wire 32 3 rs_data [31:0] $end
$var wire 5 4 rs [4:0] $end
$var wire 32 5 results_addr [31:0] $end
$var wire 5 6 rd [4:0] $end
$var wire 1 7 ram_write $end
$var wire 1 8 ram_load $end
$var wire 32 9 ram_addr [31:0] $end
$var wire 32 : output_data [31:0] $end
$var wire 32 ; next_addr_pc [31:0] $end
$var wire 16 < jump_offset [15:0] $end
$var wire 1 = jump $end
$var wire 32 > inst [31:0] $end
$var wire 32 ? imm [31:0] $end
$var wire 32 @ data_tmp [31:0] $end
$var wire 32 A data_out [31:0] $end
$var wire 32 B b [31:0] $end
$var wire 3 C alu_func [2:0] $end
$var reg 32 D current_addr_pc [31:0] $end
$scope module alu $end
$var wire 32 E a [31:0] $end
$var wire 32 F b [31:0] $end
$var wire 3 G alu_func [2:0] $end
$var reg 32 H data_out [31:0] $end
$upscope $end
$scope module cu1 $end
$var wire 3 I tmp [2:0] $end
$var wire 32 J temp_imm [31:0] $end
$var wire 1 0 signal_extension $end
$var wire 1 7 ram_write $end
$var wire 1 8 ram_load $end
$var wire 1 = jump $end
$var wire 32 K instruction [31:0] $end
$var wire 4 L case_test [3:0] $end
$var wire 3 M alu_func [2:0] $end
$var reg 32 N imm [31:0] $end
$var reg 16 O jump_offset [15:0] $end
$var reg 32 P ram_addr [31:0] $end
$var reg 5 Q rd [4:0] $end
$var reg 5 R rs [4:0] $end
$var reg 5 S rt [4:0] $end
$scope module dec $end
$var wire 1 T add $end
$var wire 1 U addi $end
$var wire 1 V alu_op_value $end
$var wire 1 W and_op $end
$var wire 1 X andi $end
$var wire 4 Y func [3:0] $end
$var wire 1 Z jump_op $end
$var wire 1 [ lw $end
$var wire 6 \ op [5:0] $end
$var wire 1 ] or_op $end
$var wire 1 ^ ori $end
$var wire 1 _ slt $end
$var wire 1 ` slti $end
$var wire 1 a sub $end
$var wire 1 b sw $end
$var wire 1 7 ram_write $end
$var wire 1 8 ram_load $end
$var wire 5 c r_case_test [4:0] $end
$var wire 1 = jump $end
$var wire 1 0 imm_enable $end
$var wire 7 d case_test [6:0] $end
$var reg 3 e alu_func [2:0] $end
$var reg 1 f imm_enable_true $end
$var reg 1 g jump_true $end
$var reg 1 h ram_load_true $end
$var reg 1 i ram_write_true $end
$upscope $end
$scope module ext_for_control_unit $end
$var wire 16 j input_imm [15:0] $end
$var wire 32 k output_imm [31:0] $end
$upscope $end
$upscope $end
$scope module inst_mem $end
$var wire 32 l inst [31:0] $end
$var wire 32 m current_addr_pc [31:0] $end
$upscope $end
$scope module pc $end
$var wire 1 + clk $end
$var wire 32 n current_addr_pc [31:0] $end
$var wire 1 , rst $end
$var reg 32 o results_addr [31:0] $end
$upscope $end
$scope module pcna $end
$var wire 32 p b [31:0] $end
$var wire 1 q cin $end
$var wire 1 r cout $end
$var wire 32 s current_addr_pc [31:0] $end
$var wire 1 = jump $end
$var wire 16 t jump_offset [15:0] $end
$var wire 32 u tmp_next_addr [31:0] $end
$var wire 32 v tmp_jump_offset [31:0] $end
$var wire 32 w shift_jump [31:0] $end
$var wire 32 x next_addr_pc [31:0] $end
$scope module ext_for_jump $end
$var wire 16 y input_imm [15:0] $end
$var wire 32 z output_imm [31:0] $end
$upscope $end
$scope module pc_adder $end
$var wire 32 { a [31:0] $end
$var wire 32 | b [31:0] $end
$var wire 1 q cin $end
$var wire 1 r cout $end
$var wire 32 } sum [31:0] $end
$var wire 3 ~ bit_carry [2:0] $end
$scope module u0 $end
$var wire 8 !" a [7:0] $end
$var wire 8 "" b [7:0] $end
$var wire 1 q cin $end
$var wire 8 #" sum [7:0] $end
$var wire 1 $" cout $end
$var wire 7 %" bit_carry [6:0] $end
$scope module u0 $end
$var wire 1 &" a $end
$var wire 1 '" b $end
$var wire 1 (" c_out $end
$var wire 1 q cin $end
$var wire 1 )" w3 $end
$var wire 1 *" w2 $end
$var wire 1 +" w1 $end
$var wire 1 ," sum $end
$scope module M1 $end
$var wire 1 &" a $end
$var wire 1 '" b $end
$var wire 1 *" cout $end
$var wire 1 +" sum $end
$upscope $end
$scope module M2 $end
$var wire 1 q a $end
$var wire 1 +" b $end
$var wire 1 )" cout $end
$var wire 1 ," sum $end
$upscope $end
$upscope $end
$scope module u1 $end
$var wire 1 -" a $end
$var wire 1 ." b $end
$var wire 1 /" c_out $end
$var wire 1 0" cin $end
$var wire 1 1" w3 $end
$var wire 1 2" w2 $end
$var wire 1 3" w1 $end
$var wire 1 4" sum $end
$scope module M1 $end
$var wire 1 -" a $end
$var wire 1 ." b $end
$var wire 1 2" cout $end
$var wire 1 3" sum $end
$upscope $end
$scope module M2 $end
$var wire 1 0" a $end
$var wire 1 3" b $end
$var wire 1 1" cout $end
$var wire 1 4" sum $end
$upscope $end
$upscope $end
$scope module u2 $end
$var wire 1 5" a $end
$var wire 1 6" b $end
$var wire 1 7" c_out $end
$var wire 1 8" cin $end
$var wire 1 9" w3 $end
$var wire 1 :" w2 $end
$var wire 1 ;" w1 $end
$var wire 1 <" sum $end
$scope module M1 $end
$var wire 1 5" a $end
$var wire 1 6" b $end
$var wire 1 :" cout $end
$var wire 1 ;" sum $end
$upscope $end
$scope module M2 $end
$var wire 1 8" a $end
$var wire 1 ;" b $end
$var wire 1 9" cout $end
$var wire 1 <" sum $end
$upscope $end
$upscope $end
$scope module u3 $end
$var wire 1 =" a $end
$var wire 1 >" b $end
$var wire 1 ?" c_out $end
$var wire 1 @" cin $end
$var wire 1 A" w3 $end
$var wire 1 B" w2 $end
$var wire 1 C" w1 $end
$var wire 1 D" sum $end
$scope module M1 $end
$var wire 1 =" a $end
$var wire 1 >" b $end
$var wire 1 B" cout $end
$var wire 1 C" sum $end
$upscope $end
$scope module M2 $end
$var wire 1 @" a $end
$var wire 1 C" b $end
$var wire 1 A" cout $end
$var wire 1 D" sum $end
$upscope $end
$upscope $end
$scope module u4 $end
$var wire 1 E" a $end
$var wire 1 F" b $end
$var wire 1 G" c_out $end
$var wire 1 H" cin $end
$var wire 1 I" w3 $end
$var wire 1 J" w2 $end
$var wire 1 K" w1 $end
$var wire 1 L" sum $end
$scope module M1 $end
$var wire 1 E" a $end
$var wire 1 F" b $end
$var wire 1 J" cout $end
$var wire 1 K" sum $end
$upscope $end
$scope module M2 $end
$var wire 1 H" a $end
$var wire 1 K" b $end
$var wire 1 I" cout $end
$var wire 1 L" sum $end
$upscope $end
$upscope $end
$scope module u5 $end
$var wire 1 M" a $end
$var wire 1 N" b $end
$var wire 1 O" c_out $end
$var wire 1 P" cin $end
$var wire 1 Q" w3 $end
$var wire 1 R" w2 $end
$var wire 1 S" w1 $end
$var wire 1 T" sum $end
$scope module M1 $end
$var wire 1 M" a $end
$var wire 1 N" b $end
$var wire 1 R" cout $end
$var wire 1 S" sum $end
$upscope $end
$scope module M2 $end
$var wire 1 P" a $end
$var wire 1 S" b $end
$var wire 1 Q" cout $end
$var wire 1 T" sum $end
$upscope $end
$upscope $end
$scope module u6 $end
$var wire 1 U" a $end
$var wire 1 V" b $end
$var wire 1 W" c_out $end
$var wire 1 X" cin $end
$var wire 1 Y" w3 $end
$var wire 1 Z" w2 $end
$var wire 1 [" w1 $end
$var wire 1 \" sum $end
$scope module M1 $end
$var wire 1 U" a $end
$var wire 1 V" b $end
$var wire 1 Z" cout $end
$var wire 1 [" sum $end
$upscope $end
$scope module M2 $end
$var wire 1 X" a $end
$var wire 1 [" b $end
$var wire 1 Y" cout $end
$var wire 1 \" sum $end
$upscope $end
$upscope $end
$scope module u7 $end
$var wire 1 ]" a $end
$var wire 1 ^" b $end
$var wire 1 $" c_out $end
$var wire 1 _" cin $end
$var wire 1 `" w3 $end
$var wire 1 a" w2 $end
$var wire 1 b" w1 $end
$var wire 1 c" sum $end
$scope module M1 $end
$var wire 1 ]" a $end
$var wire 1 ^" b $end
$var wire 1 a" cout $end
$var wire 1 b" sum $end
$upscope $end
$scope module M2 $end
$var wire 1 _" a $end
$var wire 1 b" b $end
$var wire 1 `" cout $end
$var wire 1 c" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module u1 $end
$var wire 8 d" a [7:0] $end
$var wire 8 e" b [7:0] $end
$var wire 1 f" cin $end
$var wire 8 g" sum [7:0] $end
$var wire 1 h" cout $end
$var wire 7 i" bit_carry [6:0] $end
$scope module u0 $end
$var wire 1 j" a $end
$var wire 1 k" b $end
$var wire 1 l" c_out $end
$var wire 1 f" cin $end
$var wire 1 m" w3 $end
$var wire 1 n" w2 $end
$var wire 1 o" w1 $end
$var wire 1 p" sum $end
$scope module M1 $end
$var wire 1 j" a $end
$var wire 1 k" b $end
$var wire 1 n" cout $end
$var wire 1 o" sum $end
$upscope $end
$scope module M2 $end
$var wire 1 f" a $end
$var wire 1 o" b $end
$var wire 1 m" cout $end
$var wire 1 p" sum $end
$upscope $end
$upscope $end
$scope module u1 $end
$var wire 1 q" a $end
$var wire 1 r" b $end
$var wire 1 s" c_out $end
$var wire 1 t" cin $end
$var wire 1 u" w3 $end
$var wire 1 v" w2 $end
$var wire 1 w" w1 $end
$var wire 1 x" sum $end
$scope module M1 $end
$var wire 1 q" a $end
$var wire 1 r" b $end
$var wire 1 v" cout $end
$var wire 1 w" sum $end
$upscope $end
$scope module M2 $end
$var wire 1 t" a $end
$var wire 1 w" b $end
$var wire 1 u" cout $end
$var wire 1 x" sum $end
$upscope $end
$upscope $end
$scope module u2 $end
$var wire 1 y" a $end
$var wire 1 z" b $end
$var wire 1 {" c_out $end
$var wire 1 |" cin $end
$var wire 1 }" w3 $end
$var wire 1 ~" w2 $end
$var wire 1 !# w1 $end
$var wire 1 "# sum $end
$scope module M1 $end
$var wire 1 y" a $end
$var wire 1 z" b $end
$var wire 1 ~" cout $end
$var wire 1 !# sum $end
$upscope $end
$scope module M2 $end
$var wire 1 |" a $end
$var wire 1 !# b $end
$var wire 1 }" cout $end
$var wire 1 "# sum $end
$upscope $end
$upscope $end
$scope module u3 $end
$var wire 1 ## a $end
$var wire 1 $# b $end
$var wire 1 %# c_out $end
$var wire 1 &# cin $end
$var wire 1 '# w3 $end
$var wire 1 (# w2 $end
$var wire 1 )# w1 $end
$var wire 1 *# sum $end
$scope module M1 $end
$var wire 1 ## a $end
$var wire 1 $# b $end
$var wire 1 (# cout $end
$var wire 1 )# sum $end
$upscope $end
$scope module M2 $end
$var wire 1 &# a $end
$var wire 1 )# b $end
$var wire 1 '# cout $end
$var wire 1 *# sum $end
$upscope $end
$upscope $end
$scope module u4 $end
$var wire 1 +# a $end
$var wire 1 ,# b $end
$var wire 1 -# c_out $end
$var wire 1 .# cin $end
$var wire 1 /# w3 $end
$var wire 1 0# w2 $end
$var wire 1 1# w1 $end
$var wire 1 2# sum $end
$scope module M1 $end
$var wire 1 +# a $end
$var wire 1 ,# b $end
$var wire 1 0# cout $end
$var wire 1 1# sum $end
$upscope $end
$scope module M2 $end
$var wire 1 .# a $end
$var wire 1 1# b $end
$var wire 1 /# cout $end
$var wire 1 2# sum $end
$upscope $end
$upscope $end
$scope module u5 $end
$var wire 1 3# a $end
$var wire 1 4# b $end
$var wire 1 5# c_out $end
$var wire 1 6# cin $end
$var wire 1 7# w3 $end
$var wire 1 8# w2 $end
$var wire 1 9# w1 $end
$var wire 1 :# sum $end
$scope module M1 $end
$var wire 1 3# a $end
$var wire 1 4# b $end
$var wire 1 8# cout $end
$var wire 1 9# sum $end
$upscope $end
$scope module M2 $end
$var wire 1 6# a $end
$var wire 1 9# b $end
$var wire 1 7# cout $end
$var wire 1 :# sum $end
$upscope $end
$upscope $end
$scope module u6 $end
$var wire 1 ;# a $end
$var wire 1 <# b $end
$var wire 1 =# c_out $end
$var wire 1 ># cin $end
$var wire 1 ?# w3 $end
$var wire 1 @# w2 $end
$var wire 1 A# w1 $end
$var wire 1 B# sum $end
$scope module M1 $end
$var wire 1 ;# a $end
$var wire 1 <# b $end
$var wire 1 @# cout $end
$var wire 1 A# sum $end
$upscope $end
$scope module M2 $end
$var wire 1 ># a $end
$var wire 1 A# b $end
$var wire 1 ?# cout $end
$var wire 1 B# sum $end
$upscope $end
$upscope $end
$scope module u7 $end
$var wire 1 C# a $end
$var wire 1 D# b $end
$var wire 1 h" c_out $end
$var wire 1 E# cin $end
$var wire 1 F# w3 $end
$var wire 1 G# w2 $end
$var wire 1 H# w1 $end
$var wire 1 I# sum $end
$scope module M1 $end
$var wire 1 C# a $end
$var wire 1 D# b $end
$var wire 1 G# cout $end
$var wire 1 H# sum $end
$upscope $end
$scope module M2 $end
$var wire 1 E# a $end
$var wire 1 H# b $end
$var wire 1 F# cout $end
$var wire 1 I# sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module u2 $end
$var wire 8 J# a [7:0] $end
$var wire 8 K# b [7:0] $end
$var wire 1 L# cin $end
$var wire 8 M# sum [7:0] $end
$var wire 1 N# cout $end
$var wire 7 O# bit_carry [6:0] $end
$scope module u0 $end
$var wire 1 P# a $end
$var wire 1 Q# b $end
$var wire 1 R# c_out $end
$var wire 1 L# cin $end
$var wire 1 S# w3 $end
$var wire 1 T# w2 $end
$var wire 1 U# w1 $end
$var wire 1 V# sum $end
$scope module M1 $end
$var wire 1 P# a $end
$var wire 1 Q# b $end
$var wire 1 T# cout $end
$var wire 1 U# sum $end
$upscope $end
$scope module M2 $end
$var wire 1 L# a $end
$var wire 1 U# b $end
$var wire 1 S# cout $end
$var wire 1 V# sum $end
$upscope $end
$upscope $end
$scope module u1 $end
$var wire 1 W# a $end
$var wire 1 X# b $end
$var wire 1 Y# c_out $end
$var wire 1 Z# cin $end
$var wire 1 [# w3 $end
$var wire 1 \# w2 $end
$var wire 1 ]# w1 $end
$var wire 1 ^# sum $end
$scope module M1 $end
$var wire 1 W# a $end
$var wire 1 X# b $end
$var wire 1 \# cout $end
$var wire 1 ]# sum $end
$upscope $end
$scope module M2 $end
$var wire 1 Z# a $end
$var wire 1 ]# b $end
$var wire 1 [# cout $end
$var wire 1 ^# sum $end
$upscope $end
$upscope $end
$scope module u2 $end
$var wire 1 _# a $end
$var wire 1 `# b $end
$var wire 1 a# c_out $end
$var wire 1 b# cin $end
$var wire 1 c# w3 $end
$var wire 1 d# w2 $end
$var wire 1 e# w1 $end
$var wire 1 f# sum $end
$scope module M1 $end
$var wire 1 _# a $end
$var wire 1 `# b $end
$var wire 1 d# cout $end
$var wire 1 e# sum $end
$upscope $end
$scope module M2 $end
$var wire 1 b# a $end
$var wire 1 e# b $end
$var wire 1 c# cout $end
$var wire 1 f# sum $end
$upscope $end
$upscope $end
$scope module u3 $end
$var wire 1 g# a $end
$var wire 1 h# b $end
$var wire 1 i# c_out $end
$var wire 1 j# cin $end
$var wire 1 k# w3 $end
$var wire 1 l# w2 $end
$var wire 1 m# w1 $end
$var wire 1 n# sum $end
$scope module M1 $end
$var wire 1 g# a $end
$var wire 1 h# b $end
$var wire 1 l# cout $end
$var wire 1 m# sum $end
$upscope $end
$scope module M2 $end
$var wire 1 j# a $end
$var wire 1 m# b $end
$var wire 1 k# cout $end
$var wire 1 n# sum $end
$upscope $end
$upscope $end
$scope module u4 $end
$var wire 1 o# a $end
$var wire 1 p# b $end
$var wire 1 q# c_out $end
$var wire 1 r# cin $end
$var wire 1 s# w3 $end
$var wire 1 t# w2 $end
$var wire 1 u# w1 $end
$var wire 1 v# sum $end
$scope module M1 $end
$var wire 1 o# a $end
$var wire 1 p# b $end
$var wire 1 t# cout $end
$var wire 1 u# sum $end
$upscope $end
$scope module M2 $end
$var wire 1 r# a $end
$var wire 1 u# b $end
$var wire 1 s# cout $end
$var wire 1 v# sum $end
$upscope $end
$upscope $end
$scope module u5 $end
$var wire 1 w# a $end
$var wire 1 x# b $end
$var wire 1 y# c_out $end
$var wire 1 z# cin $end
$var wire 1 {# w3 $end
$var wire 1 |# w2 $end
$var wire 1 }# w1 $end
$var wire 1 ~# sum $end
$scope module M1 $end
$var wire 1 w# a $end
$var wire 1 x# b $end
$var wire 1 |# cout $end
$var wire 1 }# sum $end
$upscope $end
$scope module M2 $end
$var wire 1 z# a $end
$var wire 1 }# b $end
$var wire 1 {# cout $end
$var wire 1 ~# sum $end
$upscope $end
$upscope $end
$scope module u6 $end
$var wire 1 !$ a $end
$var wire 1 "$ b $end
$var wire 1 #$ c_out $end
$var wire 1 $$ cin $end
$var wire 1 %$ w3 $end
$var wire 1 &$ w2 $end
$var wire 1 '$ w1 $end
$var wire 1 ($ sum $end
$scope module M1 $end
$var wire 1 !$ a $end
$var wire 1 "$ b $end
$var wire 1 &$ cout $end
$var wire 1 '$ sum $end
$upscope $end
$scope module M2 $end
$var wire 1 $$ a $end
$var wire 1 '$ b $end
$var wire 1 %$ cout $end
$var wire 1 ($ sum $end
$upscope $end
$upscope $end
$scope module u7 $end
$var wire 1 )$ a $end
$var wire 1 *$ b $end
$var wire 1 N# c_out $end
$var wire 1 +$ cin $end
$var wire 1 ,$ w3 $end
$var wire 1 -$ w2 $end
$var wire 1 .$ w1 $end
$var wire 1 /$ sum $end
$scope module M1 $end
$var wire 1 )$ a $end
$var wire 1 *$ b $end
$var wire 1 -$ cout $end
$var wire 1 .$ sum $end
$upscope $end
$scope module M2 $end
$var wire 1 +$ a $end
$var wire 1 .$ b $end
$var wire 1 ,$ cout $end
$var wire 1 /$ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module u3 $end
$var wire 8 0$ a [7:0] $end
$var wire 8 1$ b [7:0] $end
$var wire 1 2$ cin $end
$var wire 1 r cout $end
$var wire 8 3$ sum [7:0] $end
$var wire 7 4$ bit_carry [6:0] $end
$scope module u0 $end
$var wire 1 5$ a $end
$var wire 1 6$ b $end
$var wire 1 7$ c_out $end
$var wire 1 2$ cin $end
$var wire 1 8$ w3 $end
$var wire 1 9$ w2 $end
$var wire 1 :$ w1 $end
$var wire 1 ;$ sum $end
$scope module M1 $end
$var wire 1 5$ a $end
$var wire 1 6$ b $end
$var wire 1 9$ cout $end
$var wire 1 :$ sum $end
$upscope $end
$scope module M2 $end
$var wire 1 2$ a $end
$var wire 1 :$ b $end
$var wire 1 8$ cout $end
$var wire 1 ;$ sum $end
$upscope $end
$upscope $end
$scope module u1 $end
$var wire 1 <$ a $end
$var wire 1 =$ b $end
$var wire 1 >$ c_out $end
$var wire 1 ?$ cin $end
$var wire 1 @$ w3 $end
$var wire 1 A$ w2 $end
$var wire 1 B$ w1 $end
$var wire 1 C$ sum $end
$scope module M1 $end
$var wire 1 <$ a $end
$var wire 1 =$ b $end
$var wire 1 A$ cout $end
$var wire 1 B$ sum $end
$upscope $end
$scope module M2 $end
$var wire 1 ?$ a $end
$var wire 1 B$ b $end
$var wire 1 @$ cout $end
$var wire 1 C$ sum $end
$upscope $end
$upscope $end
$scope module u2 $end
$var wire 1 D$ a $end
$var wire 1 E$ b $end
$var wire 1 F$ c_out $end
$var wire 1 G$ cin $end
$var wire 1 H$ w3 $end
$var wire 1 I$ w2 $end
$var wire 1 J$ w1 $end
$var wire 1 K$ sum $end
$scope module M1 $end
$var wire 1 D$ a $end
$var wire 1 E$ b $end
$var wire 1 I$ cout $end
$var wire 1 J$ sum $end
$upscope $end
$scope module M2 $end
$var wire 1 G$ a $end
$var wire 1 J$ b $end
$var wire 1 H$ cout $end
$var wire 1 K$ sum $end
$upscope $end
$upscope $end
$scope module u3 $end
$var wire 1 L$ a $end
$var wire 1 M$ b $end
$var wire 1 N$ c_out $end
$var wire 1 O$ cin $end
$var wire 1 P$ w3 $end
$var wire 1 Q$ w2 $end
$var wire 1 R$ w1 $end
$var wire 1 S$ sum $end
$scope module M1 $end
$var wire 1 L$ a $end
$var wire 1 M$ b $end
$var wire 1 Q$ cout $end
$var wire 1 R$ sum $end
$upscope $end
$scope module M2 $end
$var wire 1 O$ a $end
$var wire 1 R$ b $end
$var wire 1 P$ cout $end
$var wire 1 S$ sum $end
$upscope $end
$upscope $end
$scope module u4 $end
$var wire 1 T$ a $end
$var wire 1 U$ b $end
$var wire 1 V$ c_out $end
$var wire 1 W$ cin $end
$var wire 1 X$ w3 $end
$var wire 1 Y$ w2 $end
$var wire 1 Z$ w1 $end
$var wire 1 [$ sum $end
$scope module M1 $end
$var wire 1 T$ a $end
$var wire 1 U$ b $end
$var wire 1 Y$ cout $end
$var wire 1 Z$ sum $end
$upscope $end
$scope module M2 $end
$var wire 1 W$ a $end
$var wire 1 Z$ b $end
$var wire 1 X$ cout $end
$var wire 1 [$ sum $end
$upscope $end
$upscope $end
$scope module u5 $end
$var wire 1 \$ a $end
$var wire 1 ]$ b $end
$var wire 1 ^$ c_out $end
$var wire 1 _$ cin $end
$var wire 1 `$ w3 $end
$var wire 1 a$ w2 $end
$var wire 1 b$ w1 $end
$var wire 1 c$ sum $end
$scope module M1 $end
$var wire 1 \$ a $end
$var wire 1 ]$ b $end
$var wire 1 a$ cout $end
$var wire 1 b$ sum $end
$upscope $end
$scope module M2 $end
$var wire 1 _$ a $end
$var wire 1 b$ b $end
$var wire 1 `$ cout $end
$var wire 1 c$ sum $end
$upscope $end
$upscope $end
$scope module u6 $end
$var wire 1 d$ a $end
$var wire 1 e$ b $end
$var wire 1 f$ c_out $end
$var wire 1 g$ cin $end
$var wire 1 h$ w3 $end
$var wire 1 i$ w2 $end
$var wire 1 j$ w1 $end
$var wire 1 k$ sum $end
$scope module M1 $end
$var wire 1 d$ a $end
$var wire 1 e$ b $end
$var wire 1 i$ cout $end
$var wire 1 j$ sum $end
$upscope $end
$scope module M2 $end
$var wire 1 g$ a $end
$var wire 1 j$ b $end
$var wire 1 h$ cout $end
$var wire 1 k$ sum $end
$upscope $end
$upscope $end
$scope module u7 $end
$var wire 1 l$ a $end
$var wire 1 m$ b $end
$var wire 1 r c_out $end
$var wire 1 n$ cin $end
$var wire 1 o$ w3 $end
$var wire 1 p$ w2 $end
$var wire 1 q$ w1 $end
$var wire 1 r$ sum $end
$scope module M1 $end
$var wire 1 l$ a $end
$var wire 1 m$ b $end
$var wire 1 p$ cout $end
$var wire 1 q$ sum $end
$upscope $end
$scope module M2 $end
$var wire 1 n$ a $end
$var wire 1 q$ b $end
$var wire 1 o$ cout $end
$var wire 1 r$ sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module ram $end
$var wire 1 + clk $end
$var wire 1 8 load $end
$var wire 32 s$ ram_addr [31:0] $end
$var wire 1 7 write $end
$var wire 32 t$ output_data [31:0] $end
$var wire 32 u$ input_data [31:0] $end
$upscope $end
$scope module regfile $end
$var wire 1 + clk $end
$var wire 32 v$ input_data [31:0] $end
$var wire 5 w$ rd [4:0] $end
$var wire 5 x$ rs [4:0] $end
$var wire 32 y$ rs_data [31:0] $end
$var wire 1 , rst $end
$var wire 5 z$ rt [4:0] $end
$var wire 32 {$ rt_data [31:0] $end
$var wire 1 . write $end
$var integer 32 |$ i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100000 |$
b0 {$
b1 z$
b0 y$
b0 x$
b1 w$
b1 v$
b0 u$
bz t$
bx s$
0r$
0q$
0p$
0o$
0n$
0m$
0l$
0k$
0j$
0i$
0h$
0g$
0f$
0e$
0d$
0c$
0b$
0a$
0`$
0_$
0^$
0]$
0\$
0[$
0Z$
0Y$
0X$
0W$
0V$
0U$
0T$
0S$
0R$
0Q$
0P$
0O$
0N$
0M$
0L$
0K$
0J$
0I$
0H$
0G$
0F$
0E$
0D$
0C$
0B$
0A$
0@$
0?$
0>$
0=$
0<$
0;$
0:$
09$
08$
07$
06$
05$
b0 4$
b0 3$
02$
b0 1$
b0 0$
0/$
0.$
0-$
0,$
0+$
0*$
0)$
0($
0'$
0&$
0%$
0$$
0#$
0"$
0!$
0~#
0}#
0|#
0{#
0z#
0y#
0x#
0w#
0v#
0u#
0t#
0s#
0r#
0q#
0p#
0o#
0n#
0m#
0l#
0k#
0j#
0i#
0h#
0g#
0f#
0e#
0d#
0c#
0b#
0a#
0`#
0_#
0^#
0]#
0\#
0[#
0Z#
0Y#
0X#
0W#
0V#
0U#
0T#
0S#
0R#
0Q#
0P#
b0 O#
0N#
b0 M#
0L#
b0 K#
b0 J#
0I#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
0@#
0?#
0>#
0=#
0<#
0;#
0:#
09#
08#
07#
06#
05#
04#
03#
02#
01#
00#
0/#
0.#
0-#
0,#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
0$#
0##
0"#
0!#
0~"
0}"
0|"
0{"
0z"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
0o"
0n"
0m"
0l"
0k"
0j"
b0 i"
0h"
b0 g"
0f"
b0 e"
b0 d"
0c"
0b"
0a"
0`"
0_"
0^"
0]"
0\"
0["
0Z"
0Y"
0X"
0W"
0V"
0U"
0T"
0S"
0R"
0Q"
0P"
0O"
0N"
0M"
0L"
0K"
0J"
0I"
0H"
0G"
0F"
0E"
0D"
0C"
0B"
0A"
0@"
0?"
0>"
0="
0<"
0;"
0:"
09"
08"
07"
06"
05"
04"
03"
02"
01"
00"
0/"
0."
0-"
1,"
1+"
0*"
0)"
0("
1'"
0&"
b0 %"
0$"
b1 #"
b1 ""
b0 !"
b0 ~
b1 }
b1 |
b0 {
b0 z
b0 y
b1 x
b0 w
b0 v
b1 u
b0 t
b0 s
0r
0q
b1 p
b0 o
b1 n
b0 m
b100000000000010000000000000001 l
b1 k
b1 j
0i
0h
0g
1f
b1 e
b1000000 d
b0 c
0b
0a
0`
0_
0^
0]
b1000 \
0[
0Z
b1 Y
0X
0W
0V
1U
0T
b1 S
b0 R
b0 Q
bx P
b0 O
b1 N
b1 M
b1 L
b100000000000010000000000000001 K
b1 J
b1 I
b1 H
b1 G
b1 F
b0 E
b1 D
b1 C
b1 B
b1 A
b1 @
b1 ?
b100000000000010000000000000001 >
0=
b0 <
b1 ;
bz :
bx 9
08
07
b0 6
b0 5
b0 4
b0 3
b1 2
b0 1
10
b1 /
1.
b0 -
0,
1+
bx *
bx )
bx (
z'
bz &
z%
bz $
bz #
bz "
z!
$end
#10
1,
0+
#20
b10 6
b10 Q
b1 @
b1 H
b10 /
b10 w$
b0 L
00
b1 B
b1 F
b10 D
b10 n
0f
b1 I
b1 e
b1000000100000 ?
b1000000100000 N
b1 2
b1 S
b1 z$
1V
14"
b0 d
0U
b10 ;
b10 x
10"
b10 u
b10 }
b10 #"
0,"
b1 %"
1("
b10000 c
1T
0+"
1*"
1&"
b1000000100000 J
b1000000100000 k
b1 !"
b1000000100000 j
b0 Y
b0 \
b10001000000100000 >
b10001000000100000 K
b10001000000100000 l
b1 5
b1 m
b1 o
b1 s
b1 {
b1 1
b1 u$
b1 {$
1+
#30
0+
#40
b11111111111111111111111111111111 A
b11111111111111111111111111111111 v$
b11111111111111111111111111111111 @
b11111111111111111111111111111111 H
b10 C
b10 G
b10 M
b11 /
b11 w$
b11 D
b11 n
b10 I
b10 e
b11 6
b11 Q
b1 1
b1 u$
b1 {$
b1 2
b1 S
b1 z$
0<"
08"
00"
b11 ;
b11 x
0/"
0T
1,"
b0 %"
0("
b11 u
b11 }
b11 #"
14"
01"
b1000 c
1a
1+"
0*"
13"
0&"
1-"
b1100000100010 J
b1100000100010 k
b10 !"
b1100000100010 j
b10 Y
b10001100000100010 >
b10001100000100010 K
b10001100000100010 l
b10 5
b10 m
b10 o
b10 s
b10 {
1+
#50
0+
#60
b11 A
b11 v$
b10 ?
b10 N
b11 @
b11 H
b1 L
10
b100 C
b100 G
b100 M
b100 /
b100 w$
b10 B
b10 F
1f
b100 D
b100 n
b100 I
b100 e
b1 -
b1 E
b1 3
b1 y$
b1 4
b1 R
b1 x$
b0 6
b0 Q
b0 1
b0 u$
b0 {$
b100 2
b100 S
b100 z$
1<"
18"
1/"
04"
11"
b10000 d
1^
b100 ;
b100 x
10"
b100 u
b100 }
b100 #"
0,"
b11 %"
1("
0V
0+"
1*"
1&"
b10 J
b10 k
b11 !"
b10 j
b1101 \
b110100001001000000000000000010 >
b110100001001000000000000000010 K
b110100001001000000000000000010 l
b11 5
b11 m
b11 o
b11 s
b11 {
1+
#70
0+
#80
b1 A
b1 v$
b1 @
b1 H
b11 C
b11 G
b11 M
b1 B
b1 F
b101 /
b101 w$
b101 D
b101 n
1f
b11 I
b11 e
b1 ?
b1 N
b101 2
b101 S
b101 z$
b1 -
b1 E
b1 3
b1 y$
b1 4
b1 R
b1 x$
0D"
08"
0@"
00"
0/"
b101 ;
b101 x
07"
1,"
b0 %"
0("
04"
01"
b101 u
b101 }
b101 #"
1<"
09"
b0 c
0a
1X
1+"
0*"
03"
1;"
b100000 d
0^
0&"
0-"
15"
b1 J
b1 k
b100 !"
b1 j
b1 Y
b1100 \
b110000001001010000000000000001 >
b110000001001010000000000000001 K
b110000001001010000000000000001 l
b100 5
b100 m
b100 o
b100 s
b100 {
b0 1
b0 u$
b0 {$
1+
#90
0+
#100
b11 A
b11 v$
b110 6
b110 Q
b11 @
b11 H
b0 L
00
b100 C
b100 G
b100 M
b11 B
b11 F
b110 /
b110 w$
b110 D
b110 n
0f
b100 I
b100 e
b11000000100101 ?
b11000000100101 N
b100 2
b100 S
b100 z$
b1 -
b1 E
b1 3
b1 y$
b1 4
b1 R
b1 x$
1V
14"
b110 ;
b110 x
10"
b10 c
1]
b0 d
0X
b110 u
b110 }
b110 #"
0,"
b1 %"
1("
0+"
1*"
1&"
b11000000100101 J
b11000000100101 k
b101 !"
b11000000100101 j
b101 Y
b0 \
b1001000011000000100101 >
b1001000011000000100101 K
b1001000011000000100101 l
b101 5
b101 m
b101 o
b101 s
b101 {
b11 1
b11 u$
b11 {$
1+
#110
0+
#120
b1 A
b1 v$
b1 @
b1 H
b11 C
b11 G
b11 M
b111 /
b111 w$
b111 D
b111 n
b11 I
b11 e
b111 6
b111 Q
b11 1
b11 u$
b11 {$
b100 2
b100 S
b100 z$
b1 -
b1 E
b1 3
b1 y$
b1 4
b1 R
b1 x$
0D"
0@"
07"
1<"
09"
08"
00"
b111 ;
b111 x
0/"
1,"
b0 %"
0("
b111 u
b111 }
b111 #"
14"
01"
1W
1+"
0*"
13"
b100 c
0]
0&"
1-"
b11100000100100 J
b11100000100100 k
b110 !"
b11100000100100 j
b100 Y
b1001000011100000100100 >
b1001000011100000100100 K
b1001000011100000100100 l
b110 5
b110 m
b110 o
b110 s
b110 {
1+
#130
0+
#140
b0 A
b0 v$
b0 @
b0 H
b101 C
b101 G
b101 M
b1000 /
b1000 w$
b1 B
b1 F
b1000 D
b1000 n
b101 I
b101 e
b1000 6
b1000 Q
b1 1
b1 u$
b1 {$
b1 2
b1 S
b1 z$
b11 -
b11 E
b11 3
b11 y$
b100 4
b100 R
b100 x$
1D"
1@"
17"
0<"
19"
18"
1/"
04"
11"
b1000 ;
b1000 x
10"
0W
b1 c
1_
b1000 u
b1000 }
b1000 #"
0,"
b111 %"
1("
0+"
1*"
1&"
b100000000101010 J
b100000000101010 k
b111 !"
b100000000101010 j
b1010 Y
b100000010100000000101010 >
b100000010100000000101010 K
b100000010100000000101010 l
b111 5
b111 m
b111 o
b111 s
b111 {
1+
#150
0+
#160
b1 A
b1 v$
b1 ?
b1 N
b1 @
b1 H
b1 L
10
b1001 /
b1001 w$
b1 B
b1 F
b1001 D
b1001 n
1f
b101 I
b101 e
b0 6
b0 Q
b0 1
b0 u$
b0 {$
b1001 2
b1001 S
b1001 z$
b11111111111111111111111111111111 -
b11111111111111111111111111111111 E
b11111111111111111111111111111111 3
b11111111111111111111111111111111 y$
b11 4
b11 R
b11 x$
0L"
08"
0@"
0H"
1`
00"
0/"
07"
b1001 ;
b1001 x
0?"
0V
1,"
b0 %"
0("
04"
01"
0<"
09"
b1001 u
b1001 }
b1001 #"
1D"
0A"
b0 c
0_
b1000 d
0Z
1+"
0*"
03"
0;"
1C"
0&"
0-"
05"
1="
b1 J
b1 k
b1000 !"
b1 j
b1 Y
b1010 \
b101000011010010000000000000001 >
b101000011010010000000000000001 K
b101000011010010000000000000001 l
b1000 5
b1000 m
b1000 o
b1000 s
b1000 {
1+
#170
0+
#180
b0 A
b0 v$
b10 9
b10 P
b10 s$
b0 @
b0 H
0.
b11 B
b11 F
17
b100 L
00
b0 C
b0 G
b0 M
b0 /
b0 w$
1i
b1010 D
b1010 n
0f
b0 I
b0 e
b100 2
b100 S
b100 z$
b0 -
b0 E
b0 3
b0 y$
b0 4
b0 R
b0 x$
1b
14"
b1010 ;
b1010 x
10"
b1010 u
b1010 }
b1010 #"
0,"
b1 %"
1("
b100 d
0`
0+"
1*"
1&"
b1001 !"
b101011 \
b10101100001001000000000000000001 >
b10101100001001000000000000000001 K
b10101100001001000000000000000001 l
b1001 5
b1001 m
b1001 o
b1001 s
b1001 {
b11 1
b11 u$
b11 {$
1+
#190
0+
#200
b1100 w
b11 v
b11 z
b11 <
b11 O
b11 t
b11 y
1=
b10 L
07
b0 B
b0 F
1g
b1100 D
b1100 n
0i
b11 9
b11 P
b11 s$
b0 1
b0 u$
b0 {$
b0 2
b0 S
b0 z$
1Z
0<"
08"
00"
b1100 ;
b1100 x
0/"
1,"
b0 %"
0("
b1011 u
b1011 }
b1011 #"
14"
01"
1+"
0*"
13"
b1 d
0b
0&"
1-"
b11 J
b11 k
b1010 !"
b11 j
b11 Y
b10 \
b1000000000000000000000000011 >
b1000000000000000000000000011 K
b1000000000000000000000000011 l
b1010 5
b1010 m
b1010 o
b1010 s
b1010 {
1+
#210
0+
#220
b1010 /
b1010 w$
b1101 D
b1101 n
b10 9
b10 P
b10 s$
b1010 2
b1010 S
b1010 z$
1.
b11 :
b11 t$
b11 A
b11 v$
b1101 ;
b1101 x
18
b1000 L
0=
b0 w
b0 v
b0 z
1h
0g
b0 <
b0 O
b0 t
b0 y
1[
04"
b1101 u
b1101 }
b1101 #"
1<"
b10 d
0Z
03"
1;"
0-"
15"
b1 J
b1 k
b1100 !"
b1 j
b1 Y
b100011 \
b10001100001010100000000000000001 >
b10001100001010100000000000000001 K
b10001100001010100000000000000001 l
b1100 5
b1100 m
b1100 o
b1100 s
b1100 {
1+
#230
0+
#240
0.
b0 L
08
b0 A
b0 v$
bz :
bz t$
b0 /
b0 w$
b1 I
b1 e
b1110 D
b1110 n
0h
b0 9
b0 P
b0 s$
b0 2
b0 S
b0 z$
1V
14"
b1110 ;
b1110 x
10"
b1110 u
b1110 }
b1110 #"
0,"
b1 %"
1("
b10000 c
1T
0+"
1*"
b0 d
0[
1&"
b0 J
b0 k
b1101 !"
b0 j
b0 Y
b0 \
b0 B
b0 F
b0 >
b0 K
b0 l
b1101 5
b1101 m
b1101 o
b1101 s
b1101 {
b0 1
b0 u$
b0 {$
1+
#250
0+
#260
b1111 D
b1111 n
0L"
0H"
0?"
1D"
0A"
0@"
07"
1<"
09"
08"
00"
b1111 ;
b1111 x
0/"
1,"
b0 %"
0("
b1111 u
b1111 }
b1111 #"
14"
01"
1+"
0*"
13"
0&"
1-"
b1110 !"
b1110 5
b1110 m
b1110 o
b1110 s
b1110 {
1+
#270
0+
#280
b10000 D
b10000 n
1L"
1H"
1?"
0D"
1A"
1@"
17"
0<"
19"
18"
1/"
04"
11"
b10000 ;
b10000 x
10"
b10000 u
b10000 }
b10000 #"
0,"
b1111 %"
1("
0+"
1*"
1&"
b1111 !"
b1111 5
b1111 m
b1111 o
b1111 s
b1111 {
1+
#290
0+
#300
b10001 D
b10001 n
b0 I
b0 e
0T"
xb
x[
08"
0@"
0H"
0P"
xU
xX
x^
x`
00"
0/"
07"
0?"
b10001 ;
b10001 x
0G"
xW
x]
x_
1,"
b0 %"
0("
04"
01"
0<"
09"
0D"
0A"
b10001 u
b10001 }
b10001 #"
1L"
0I"
0.
xT
bx c
xa
xV
bx d
xZ
1+"
0*"
03"
0;"
0C"
1K"
0&"
0-"
05"
0="
1E"
bx J
bx k
b10000 !"
b0 C
b0 G
b0 M
bx j
bx Y
bx \
bx >
bx K
bx l
b10000 5
b10000 m
b10000 o
b10000 s
b10000 {
1+
#310
0+
#320
b10010 D
b10010 n
14"
b10010 ;
b10010 x
10"
b10010 u
b10010 }
b10010 #"
0,"
b1 %"
1("
0+"
1*"
1&"
b10001 !"
b10001 5
b10001 m
b10001 o
b10001 s
b10001 {
1+
#330
0+
#340
b10011 D
b10011 n
0<"
08"
00"
b10011 ;
b10011 x
0/"
1,"
b0 %"
0("
b10011 u
b10011 }
b10011 #"
14"
01"
1+"
0*"
13"
0&"
1-"
b10010 !"
b10010 5
b10010 m
b10010 o
b10010 s
b10010 {
1+
#350
0+
#360
b10100 D
b10100 n
1<"
18"
1/"
04"
11"
b10100 ;
b10100 x
10"
b10100 u
b10100 }
b10100 #"
0,"
b11 %"
1("
0+"
1*"
1&"
b10011 !"
b10011 5
b10011 m
b10011 o
b10011 s
b10011 {
1+
#370
0+
#380
b10101 D
b10101 n
0D"
08"
0@"
00"
0/"
b10101 ;
b10101 x
07"
1,"
b0 %"
0("
04"
01"
b10101 u
b10101 }
b10101 #"
1<"
09"
1+"
0*"
03"
1;"
0&"
0-"
15"
b10100 !"
b10100 5
b10100 m
b10100 o
b10100 s
b10100 {
1+
#390
0+
#400
b10110 D
b10110 n
14"
b10110 ;
b10110 x
10"
b10110 u
b10110 }
b10110 #"
0,"
b1 %"
1("
0+"
1*"
1&"
b10101 !"
b10101 5
b10101 m
b10101 o
b10101 s
b10101 {
1+
#410
0+
#420
b10111 D
b10111 n
0D"
0@"
07"
1<"
09"
08"
00"
b10111 ;
b10111 x
0/"
1,"
b0 %"
0("
b10111 u
b10111 }
b10111 #"
14"
01"
1+"
0*"
13"
0&"
1-"
b10110 !"
b10110 5
b10110 m
b10110 o
b10110 s
b10110 {
1+
#430
0+
#440
b11000 D
b11000 n
1D"
1@"
17"
0<"
19"
18"
1/"
04"
11"
b11000 ;
b11000 x
10"
b11000 u
b11000 }
b11000 #"
0,"
b111 %"
1("
0+"
1*"
1&"
b10111 !"
b10111 5
b10111 m
b10111 o
b10111 s
b10111 {
1+
#450
0+
#460
b11001 D
b11001 n
0T"
0P"
0G"
1L"
0I"
08"
0@"
0H"
00"
0/"
07"
b11001 ;
b11001 x
0?"
1,"
b0 %"
0("
04"
01"
0<"
09"
b11001 u
b11001 }
b11001 #"
1D"
0A"
1+"
0*"
03"
0;"
1C"
0&"
0-"
05"
1="
b11000 !"
b11000 5
b11000 m
b11000 o
b11000 s
b11000 {
1+
#470
0+
#480
b11010 D
b11010 n
14"
b11010 ;
b11010 x
10"
b11010 u
b11010 }
b11010 #"
0,"
b1 %"
1("
0+"
1*"
1&"
b11001 !"
b11001 5
b11001 m
b11001 o
b11001 s
b11001 {
1+
#490
0+
#500
b11011 D
b11011 n
0<"
08"
00"
b11011 ;
b11011 x
0/"
1,"
b0 %"
0("
b11011 u
b11011 }
b11011 #"
14"
01"
1+"
0*"
13"
0&"
1-"
b11010 !"
b11010 5
b11010 m
b11010 o
b11010 s
b11010 {
1+
