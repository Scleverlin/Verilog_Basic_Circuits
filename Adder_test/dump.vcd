$date
	Fri May 19 19:45:32 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_bka_8 $end
$var wire 8 ! sum [7:0] $end
$var wire 1 " cout $end
$var reg 8 # a [7:0] $end
$var reg 8 $ b [7:0] $end
$var reg 1 % cin $end
$scope module shi $end
$var wire 8 & a [8:1] $end
$var wire 8 ' b [8:1] $end
$var wire 1 % cin $end
$var wire 1 " cout $end
$var wire 8 ( sum [8:1] $end
$var wire 8 ) pp [7:0] $end
$var wire 8 * p [8:1] $end
$var wire 8 + gnpg [7:0] $end
$var wire 7 , c [7:1] $end
$scope module pg_gen $end
$var wire 8 - a [8:1] $end
$var wire 8 . b [8:1] $end
$var wire 1 % cin $end
$var wire 8 / g [8:1] $end
$var wire 8 0 p [8:1] $end
$var wire 4 1 pp_level3 [3:0] $end
$var wire 6 2 pp_level2 [5:0] $end
$var wire 8 3 pp_level1 [7:0] $end
$var wire 8 4 pp [7:0] $end
$var wire 4 5 gnpg_level3 [3:0] $end
$var wire 6 6 gnpg_level2 [5:0] $end
$var wire 8 7 gnpg_level1 [7:0] $end
$var wire 8 8 gnpg [7:0] $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$scope begin genblk1[4] $end
$upscope $end
$scope begin genblk1[5] $end
$upscope $end
$scope begin genblk1[6] $end
$upscope $end
$scope begin genblk1[7] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
x%
bx $
bx #
x"
bx !
$end
#10
0"
b0 5
b0 1
b0 ,
b1 2
b0 6
b111 )
b111 4
b111 !
b111 (
b0 +
b0 8
b111 3
b0 7
b111 *
b111 0
b0 /
0%
b101 $
b101 '
b101 .
b10 #
b10 &
b10 -
#30
b0 6
b1 ,
b0 2
b0 )
b0 4
b10 !
b10 (
b1 +
b1 8
b0 3
b1 7
b0 *
b0 0
b1 /
b1 $
b1 '
b1 .
b1 #
b1 &
b1 -
#50
b1 5
b10100 ,
b101 6
b10100 +
b10100 8
b10100 7
b101001 !
b101001 (
b10100 /
1%
b10100 $
b10100 '
b10100 .
b10100 #
b10100 &
b10100 -
#70
b100 5
b10010111 !
b10010111 (
b1001011 ,
b10010 6
b1001011 +
b1001011 8
b1001011 7
b1001011 /
b1001011 $
b1001011 '
b1001011 .
b1001011 #
b1001011 &
b1001011 -
#90
1"
b1000 5
b100000 6
b0 ,
b10000000 +
b10000000 8
b10000000 7
b0 !
b0 (
b10000000 /
0%
b10000000 $
b10000000 '
b10000000 .
b10000000 #
b10000000 &
b10000000 -
#110
0"
b0 +
b0 8
b0 5
b0 6
b100 2
b10011000 3
b11011100 !
b11011100 (
b0 7
b11011100 *
b11011100 0
b0 /
b10100 $
b10100 '
b10100 .
b11001000 #
b11001000 &
b11001000 -
#1000
