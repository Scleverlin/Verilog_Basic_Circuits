$date
	Fri Mar 24 21:15:42 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_KSA_8 $end
$var wire 8 ! sum [7:0] $end
$var wire 1 " cout $end
$var reg 8 # a [7:0] $end
$var reg 8 $ b [7:0] $end
$var reg 1 % cin $end
$scope module KSA $end
$var wire 8 & a [7:0] $end
$var wire 8 ' b [7:0] $end
$var wire 1 % cin $end
$var wire 1 " cout $end
$var wire 1 ( level_4_p $end
$var wire 1 ) level_4_q $end
$var wire 8 * sum [7:0] $end
$var wire 9 + p [9:1] $end
$var wire 9 , level_3_q [9:1] $end
$var wire 8 - level_3_p [9:2] $end
$var wire 9 . level_2_q [9:1] $end
$var wire 8 / level_2_p [9:2] $end
$var wire 9 0 level_1_q [9:1] $end
$var wire 8 1 level_1_p [9:2] $end
$var wire 9 2 g [9:1] $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$scope begin genblk1[4] $end
$upscope $end
$scope begin genblk1[5] $end
$upscope $end
$scope begin genblk1[6] $end
$upscope $end
$scope begin genblk1[7] $end
$upscope $end
$scope begin genblk1[8] $end
$upscope $end
$scope begin genblk1[9] $end
$upscope $end
$scope begin genblk2[3] $end
$upscope $end
$scope begin genblk2[4] $end
$upscope $end
$scope begin genblk2[5] $end
$upscope $end
$scope begin genblk2[6] $end
$upscope $end
$scope begin genblk2[7] $end
$upscope $end
$scope begin genblk2[8] $end
$upscope $end
$scope begin genblk2[9] $end
$upscope $end
$scope begin genblk3[3] $end
$upscope $end
$scope begin genblk3[4] $end
$upscope $end
$scope begin genblk3[5] $end
$upscope $end
$scope begin genblk3[6] $end
$upscope $end
$scope begin genblk3[7] $end
$upscope $end
$scope begin genblk3[8] $end
$upscope $end
$scope begin genblk3[9] $end
$upscope $end
$scope begin genblk4[4] $end
$upscope $end
$scope begin genblk4[5] $end
$upscope $end
$scope begin genblk4[6] $end
$upscope $end
$scope begin genblk4[7] $end
$upscope $end
$scope begin genblk4[8] $end
$upscope $end
$scope begin genblk4[9] $end
$upscope $end
$scope begin genblk5[1] $end
$upscope $end
$scope begin genblk5[2] $end
$upscope $end
$scope begin genblk5[3] $end
$upscope $end
$scope begin genblk5[4] $end
$upscope $end
$scope begin genblk6[5] $end
$upscope $end
$scope begin genblk6[6] $end
$upscope $end
$scope begin genblk6[7] $end
$upscope $end
$scope begin genblk6[8] $end
$upscope $end
$scope begin genblk6[9] $end
$upscope $end
$scope module u0 $end
$var wire 8 3 a [7:0] $end
$var wire 8 4 b [7:0] $end
$var wire 8 5 g [7:0] $end
$var wire 8 6 p [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bxz /
bx .
bxzz -
bx ,
bx0 +
bx *
x)
x(
bx '
bx &
x%
bx $
bx #
x"
bx !
$end
#10
0"
0)
0(
b0xzz -
b111 !
b111 *
b11z /
b0 ,
b111 1
b0 .
b1110 +
b111 6
b0 5
b0 2
b0 0
0%
b101 $
b101 '
b101 4
b10 #
b10 &
b10 3
#30
b0zz -
b10 ,
b0z /
b10 .
b10 !
b10 *
b10 0
b0 1
b0 +
b0 6
b10 2
b1 5
b1 $
b1 '
b1 4
b1 #
b1 &
b1 3
#50
b101001 !
b101001 *
b101001 ,
b101001 .
b10100 5
b101001 2
b101001 0
1%
b10100 $
b10100 '
b10100 4
b10100 #
b10100 &
b10100 3
#70
b10010111 !
b10010111 *
b10010111 ,
b10010111 .
b10010111 0
b10010111 2
b1001011 5
b1001011 $
b1001011 '
b1001011 4
b1001011 #
b1001011 &
b1001011 3
#90
1"
1)
b0 !
b0 *
b100000000 ,
b100000000 .
b10000000 5
b100000000 2
b100000000 0
0%
b10000000 $
b10000000 '
b10000000 4
b10000000 #
b10000000 &
b10000000 3
#110
0"
0)
b0 ,
b0 .
b1001100z /
b11011100 !
b11011100 *
b0 0
b11011100 1
b110111000 +
b11011100 6
b0 2
b0 5
b10100 $
b10100 '
b10100 4
b11001000 #
b11001000 &
b11001000 3
#1000
