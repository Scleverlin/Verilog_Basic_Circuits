$date
	Fri Feb 24 22:18:26 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_64_bit_adder $end
$var wire 64 ! sum [63:0] $end
$var wire 1 " cout $end
$var reg 64 # a [63:0] $end
$var reg 64 $ b [63:0] $end
$var reg 1 % cin $end
$scope module u0 $end
$var wire 64 & a [63:0] $end
$var wire 64 ' b [63:0] $end
$var wire 1 % cin $end
$var wire 64 ( sum [63:0] $end
$var wire 1 " cout $end
$var wire 7 ) bit_carry [6:0] $end
$scope module u0 $end
$var wire 8 * a [7:0] $end
$var wire 8 + b [7:0] $end
$var wire 1 % cin $end
$var wire 8 , sum [7:0] $end
$var wire 1 - cout $end
$var wire 7 . bit_carry [6:0] $end
$scope module u0 $end
$var wire 1 / a $end
$var wire 1 0 b $end
$var wire 1 1 c_out $end
$var wire 1 % cin $end
$var wire 1 2 sum $end
$upscope $end
$scope module u1 $end
$var wire 1 3 a $end
$var wire 1 4 b $end
$var wire 1 5 c_out $end
$var wire 1 6 cin $end
$var wire 1 7 sum $end
$upscope $end
$scope module u2 $end
$var wire 1 8 a $end
$var wire 1 9 b $end
$var wire 1 : c_out $end
$var wire 1 ; cin $end
$var wire 1 < sum $end
$upscope $end
$scope module u3 $end
$var wire 1 = a $end
$var wire 1 > b $end
$var wire 1 ? c_out $end
$var wire 1 @ cin $end
$var wire 1 A sum $end
$upscope $end
$scope module u4 $end
$var wire 1 B a $end
$var wire 1 C b $end
$var wire 1 D c_out $end
$var wire 1 E cin $end
$var wire 1 F sum $end
$upscope $end
$scope module u5 $end
$var wire 1 G a $end
$var wire 1 H b $end
$var wire 1 I c_out $end
$var wire 1 J cin $end
$var wire 1 K sum $end
$upscope $end
$scope module u6 $end
$var wire 1 L a $end
$var wire 1 M b $end
$var wire 1 N c_out $end
$var wire 1 O cin $end
$var wire 1 P sum $end
$upscope $end
$scope module u7 $end
$var wire 1 Q a $end
$var wire 1 R b $end
$var wire 1 - c_out $end
$var wire 1 S cin $end
$var wire 1 T sum $end
$upscope $end
$upscope $end
$scope module u1 $end
$var wire 8 U a [7:0] $end
$var wire 8 V b [7:0] $end
$var wire 1 W cin $end
$var wire 8 X sum [7:0] $end
$var wire 1 Y cout $end
$var wire 7 Z bit_carry [6:0] $end
$scope module u0 $end
$var wire 1 [ a $end
$var wire 1 \ b $end
$var wire 1 ] c_out $end
$var wire 1 W cin $end
$var wire 1 ^ sum $end
$upscope $end
$scope module u1 $end
$var wire 1 _ a $end
$var wire 1 ` b $end
$var wire 1 a c_out $end
$var wire 1 b cin $end
$var wire 1 c sum $end
$upscope $end
$scope module u2 $end
$var wire 1 d a $end
$var wire 1 e b $end
$var wire 1 f c_out $end
$var wire 1 g cin $end
$var wire 1 h sum $end
$upscope $end
$scope module u3 $end
$var wire 1 i a $end
$var wire 1 j b $end
$var wire 1 k c_out $end
$var wire 1 l cin $end
$var wire 1 m sum $end
$upscope $end
$scope module u4 $end
$var wire 1 n a $end
$var wire 1 o b $end
$var wire 1 p c_out $end
$var wire 1 q cin $end
$var wire 1 r sum $end
$upscope $end
$scope module u5 $end
$var wire 1 s a $end
$var wire 1 t b $end
$var wire 1 u c_out $end
$var wire 1 v cin $end
$var wire 1 w sum $end
$upscope $end
$scope module u6 $end
$var wire 1 x a $end
$var wire 1 y b $end
$var wire 1 z c_out $end
$var wire 1 { cin $end
$var wire 1 | sum $end
$upscope $end
$scope module u7 $end
$var wire 1 } a $end
$var wire 1 ~ b $end
$var wire 1 Y c_out $end
$var wire 1 !" cin $end
$var wire 1 "" sum $end
$upscope $end
$upscope $end
$scope module u2 $end
$var wire 8 #" a [7:0] $end
$var wire 8 $" b [7:0] $end
$var wire 1 %" cin $end
$var wire 8 &" sum [7:0] $end
$var wire 1 '" cout $end
$var wire 7 (" bit_carry [6:0] $end
$scope module u0 $end
$var wire 1 )" a $end
$var wire 1 *" b $end
$var wire 1 +" c_out $end
$var wire 1 %" cin $end
$var wire 1 ," sum $end
$upscope $end
$scope module u1 $end
$var wire 1 -" a $end
$var wire 1 ." b $end
$var wire 1 /" c_out $end
$var wire 1 0" cin $end
$var wire 1 1" sum $end
$upscope $end
$scope module u2 $end
$var wire 1 2" a $end
$var wire 1 3" b $end
$var wire 1 4" c_out $end
$var wire 1 5" cin $end
$var wire 1 6" sum $end
$upscope $end
$scope module u3 $end
$var wire 1 7" a $end
$var wire 1 8" b $end
$var wire 1 9" c_out $end
$var wire 1 :" cin $end
$var wire 1 ;" sum $end
$upscope $end
$scope module u4 $end
$var wire 1 <" a $end
$var wire 1 =" b $end
$var wire 1 >" c_out $end
$var wire 1 ?" cin $end
$var wire 1 @" sum $end
$upscope $end
$scope module u5 $end
$var wire 1 A" a $end
$var wire 1 B" b $end
$var wire 1 C" c_out $end
$var wire 1 D" cin $end
$var wire 1 E" sum $end
$upscope $end
$scope module u6 $end
$var wire 1 F" a $end
$var wire 1 G" b $end
$var wire 1 H" c_out $end
$var wire 1 I" cin $end
$var wire 1 J" sum $end
$upscope $end
$scope module u7 $end
$var wire 1 K" a $end
$var wire 1 L" b $end
$var wire 1 '" c_out $end
$var wire 1 M" cin $end
$var wire 1 N" sum $end
$upscope $end
$upscope $end
$scope module u3 $end
$var wire 8 O" a [7:0] $end
$var wire 8 P" b [7:0] $end
$var wire 1 Q" cin $end
$var wire 8 R" sum [7:0] $end
$var wire 1 S" cout $end
$var wire 7 T" bit_carry [6:0] $end
$scope module u0 $end
$var wire 1 U" a $end
$var wire 1 V" b $end
$var wire 1 W" c_out $end
$var wire 1 Q" cin $end
$var wire 1 X" sum $end
$upscope $end
$scope module u1 $end
$var wire 1 Y" a $end
$var wire 1 Z" b $end
$var wire 1 [" c_out $end
$var wire 1 \" cin $end
$var wire 1 ]" sum $end
$upscope $end
$scope module u2 $end
$var wire 1 ^" a $end
$var wire 1 _" b $end
$var wire 1 `" c_out $end
$var wire 1 a" cin $end
$var wire 1 b" sum $end
$upscope $end
$scope module u3 $end
$var wire 1 c" a $end
$var wire 1 d" b $end
$var wire 1 e" c_out $end
$var wire 1 f" cin $end
$var wire 1 g" sum $end
$upscope $end
$scope module u4 $end
$var wire 1 h" a $end
$var wire 1 i" b $end
$var wire 1 j" c_out $end
$var wire 1 k" cin $end
$var wire 1 l" sum $end
$upscope $end
$scope module u5 $end
$var wire 1 m" a $end
$var wire 1 n" b $end
$var wire 1 o" c_out $end
$var wire 1 p" cin $end
$var wire 1 q" sum $end
$upscope $end
$scope module u6 $end
$var wire 1 r" a $end
$var wire 1 s" b $end
$var wire 1 t" c_out $end
$var wire 1 u" cin $end
$var wire 1 v" sum $end
$upscope $end
$scope module u7 $end
$var wire 1 w" a $end
$var wire 1 x" b $end
$var wire 1 S" c_out $end
$var wire 1 y" cin $end
$var wire 1 z" sum $end
$upscope $end
$upscope $end
$scope module u4 $end
$var wire 8 {" a [7:0] $end
$var wire 8 |" b [7:0] $end
$var wire 1 }" cin $end
$var wire 8 ~" sum [7:0] $end
$var wire 1 !# cout $end
$var wire 7 "# bit_carry [6:0] $end
$scope module u0 $end
$var wire 1 ## a $end
$var wire 1 $# b $end
$var wire 1 %# c_out $end
$var wire 1 }" cin $end
$var wire 1 &# sum $end
$upscope $end
$scope module u1 $end
$var wire 1 '# a $end
$var wire 1 (# b $end
$var wire 1 )# c_out $end
$var wire 1 *# cin $end
$var wire 1 +# sum $end
$upscope $end
$scope module u2 $end
$var wire 1 ,# a $end
$var wire 1 -# b $end
$var wire 1 .# c_out $end
$var wire 1 /# cin $end
$var wire 1 0# sum $end
$upscope $end
$scope module u3 $end
$var wire 1 1# a $end
$var wire 1 2# b $end
$var wire 1 3# c_out $end
$var wire 1 4# cin $end
$var wire 1 5# sum $end
$upscope $end
$scope module u4 $end
$var wire 1 6# a $end
$var wire 1 7# b $end
$var wire 1 8# c_out $end
$var wire 1 9# cin $end
$var wire 1 :# sum $end
$upscope $end
$scope module u5 $end
$var wire 1 ;# a $end
$var wire 1 <# b $end
$var wire 1 =# c_out $end
$var wire 1 ># cin $end
$var wire 1 ?# sum $end
$upscope $end
$scope module u6 $end
$var wire 1 @# a $end
$var wire 1 A# b $end
$var wire 1 B# c_out $end
$var wire 1 C# cin $end
$var wire 1 D# sum $end
$upscope $end
$scope module u7 $end
$var wire 1 E# a $end
$var wire 1 F# b $end
$var wire 1 !# c_out $end
$var wire 1 G# cin $end
$var wire 1 H# sum $end
$upscope $end
$upscope $end
$scope module u5 $end
$var wire 8 I# a [7:0] $end
$var wire 8 J# b [7:0] $end
$var wire 1 K# cin $end
$var wire 8 L# sum [7:0] $end
$var wire 1 M# cout $end
$var wire 7 N# bit_carry [6:0] $end
$scope module u0 $end
$var wire 1 O# a $end
$var wire 1 P# b $end
$var wire 1 Q# c_out $end
$var wire 1 K# cin $end
$var wire 1 R# sum $end
$upscope $end
$scope module u1 $end
$var wire 1 S# a $end
$var wire 1 T# b $end
$var wire 1 U# c_out $end
$var wire 1 V# cin $end
$var wire 1 W# sum $end
$upscope $end
$scope module u2 $end
$var wire 1 X# a $end
$var wire 1 Y# b $end
$var wire 1 Z# c_out $end
$var wire 1 [# cin $end
$var wire 1 \# sum $end
$upscope $end
$scope module u3 $end
$var wire 1 ]# a $end
$var wire 1 ^# b $end
$var wire 1 _# c_out $end
$var wire 1 `# cin $end
$var wire 1 a# sum $end
$upscope $end
$scope module u4 $end
$var wire 1 b# a $end
$var wire 1 c# b $end
$var wire 1 d# c_out $end
$var wire 1 e# cin $end
$var wire 1 f# sum $end
$upscope $end
$scope module u5 $end
$var wire 1 g# a $end
$var wire 1 h# b $end
$var wire 1 i# c_out $end
$var wire 1 j# cin $end
$var wire 1 k# sum $end
$upscope $end
$scope module u6 $end
$var wire 1 l# a $end
$var wire 1 m# b $end
$var wire 1 n# c_out $end
$var wire 1 o# cin $end
$var wire 1 p# sum $end
$upscope $end
$scope module u7 $end
$var wire 1 q# a $end
$var wire 1 r# b $end
$var wire 1 M# c_out $end
$var wire 1 s# cin $end
$var wire 1 t# sum $end
$upscope $end
$upscope $end
$scope module u6 $end
$var wire 8 u# a [7:0] $end
$var wire 8 v# b [7:0] $end
$var wire 1 w# cin $end
$var wire 8 x# sum [7:0] $end
$var wire 1 y# cout $end
$var wire 7 z# bit_carry [6:0] $end
$scope module u0 $end
$var wire 1 {# a $end
$var wire 1 |# b $end
$var wire 1 }# c_out $end
$var wire 1 w# cin $end
$var wire 1 ~# sum $end
$upscope $end
$scope module u1 $end
$var wire 1 !$ a $end
$var wire 1 "$ b $end
$var wire 1 #$ c_out $end
$var wire 1 $$ cin $end
$var wire 1 %$ sum $end
$upscope $end
$scope module u2 $end
$var wire 1 &$ a $end
$var wire 1 '$ b $end
$var wire 1 ($ c_out $end
$var wire 1 )$ cin $end
$var wire 1 *$ sum $end
$upscope $end
$scope module u3 $end
$var wire 1 +$ a $end
$var wire 1 ,$ b $end
$var wire 1 -$ c_out $end
$var wire 1 .$ cin $end
$var wire 1 /$ sum $end
$upscope $end
$scope module u4 $end
$var wire 1 0$ a $end
$var wire 1 1$ b $end
$var wire 1 2$ c_out $end
$var wire 1 3$ cin $end
$var wire 1 4$ sum $end
$upscope $end
$scope module u5 $end
$var wire 1 5$ a $end
$var wire 1 6$ b $end
$var wire 1 7$ c_out $end
$var wire 1 8$ cin $end
$var wire 1 9$ sum $end
$upscope $end
$scope module u6 $end
$var wire 1 :$ a $end
$var wire 1 ;$ b $end
$var wire 1 <$ c_out $end
$var wire 1 =$ cin $end
$var wire 1 >$ sum $end
$upscope $end
$scope module u7 $end
$var wire 1 ?$ a $end
$var wire 1 @$ b $end
$var wire 1 y# c_out $end
$var wire 1 A$ cin $end
$var wire 1 B$ sum $end
$upscope $end
$upscope $end
$scope module u7 $end
$var wire 8 C$ a [7:0] $end
$var wire 8 D$ b [7:0] $end
$var wire 1 E$ cin $end
$var wire 8 F$ sum [7:0] $end
$var wire 1 " cout $end
$var wire 7 G$ bit_carry [6:0] $end
$scope module u0 $end
$var wire 1 H$ a $end
$var wire 1 I$ b $end
$var wire 1 J$ c_out $end
$var wire 1 E$ cin $end
$var wire 1 K$ sum $end
$upscope $end
$scope module u1 $end
$var wire 1 L$ a $end
$var wire 1 M$ b $end
$var wire 1 N$ c_out $end
$var wire 1 O$ cin $end
$var wire 1 P$ sum $end
$upscope $end
$scope module u2 $end
$var wire 1 Q$ a $end
$var wire 1 R$ b $end
$var wire 1 S$ c_out $end
$var wire 1 T$ cin $end
$var wire 1 U$ sum $end
$upscope $end
$scope module u3 $end
$var wire 1 V$ a $end
$var wire 1 W$ b $end
$var wire 1 X$ c_out $end
$var wire 1 Y$ cin $end
$var wire 1 Z$ sum $end
$upscope $end
$scope module u4 $end
$var wire 1 [$ a $end
$var wire 1 \$ b $end
$var wire 1 ]$ c_out $end
$var wire 1 ^$ cin $end
$var wire 1 _$ sum $end
$upscope $end
$scope module u5 $end
$var wire 1 `$ a $end
$var wire 1 a$ b $end
$var wire 1 b$ c_out $end
$var wire 1 c$ cin $end
$var wire 1 d$ sum $end
$upscope $end
$scope module u6 $end
$var wire 1 e$ a $end
$var wire 1 f$ b $end
$var wire 1 g$ c_out $end
$var wire 1 h$ cin $end
$var wire 1 i$ sum $end
$upscope $end
$scope module u7 $end
$var wire 1 j$ a $end
$var wire 1 k$ b $end
$var wire 1 " c_out $end
$var wire 1 l$ cin $end
$var wire 1 m$ sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
xm$
xl$
xk$
xj$
xi$
xh$
xg$
xf$
xe$
xd$
xc$
xb$
xa$
x`$
x_$
x^$
x]$
x\$
x[$
xZ$
xY$
xX$
xW$
xV$
xU$
xT$
xS$
xR$
xQ$
xP$
xO$
xN$
xM$
xL$
xK$
xJ$
xI$
xH$
bx G$
bx F$
xE$
bx D$
bx C$
xB$
xA$
x@$
x?$
x>$
x=$
x<$
x;$
x:$
x9$
x8$
x7$
x6$
x5$
x4$
x3$
x2$
x1$
x0$
x/$
x.$
x-$
x,$
x+$
x*$
x)$
x($
x'$
x&$
x%$
x$$
x#$
x"$
x!$
x~#
x}#
x|#
x{#
bx z#
xy#
bx x#
xw#
bx v#
bx u#
xt#
xs#
xr#
xq#
xp#
xo#
xn#
xm#
xl#
xk#
xj#
xi#
xh#
xg#
xf#
xe#
xd#
xc#
xb#
xa#
x`#
x_#
x^#
x]#
x\#
x[#
xZ#
xY#
xX#
xW#
xV#
xU#
xT#
xS#
xR#
xQ#
xP#
xO#
bx N#
xM#
bx L#
xK#
bx J#
bx I#
xH#
xG#
xF#
xE#
xD#
xC#
xB#
xA#
x@#
x?#
x>#
x=#
x<#
x;#
x:#
x9#
x8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
x/#
x.#
x-#
x,#
x+#
x*#
x)#
x(#
x'#
x&#
x%#
x$#
x##
bx "#
x!#
bx ~"
x}"
bx |"
bx {"
xz"
xy"
xx"
xw"
xv"
xu"
xt"
xs"
xr"
xq"
xp"
xo"
xn"
xm"
xl"
xk"
xj"
xi"
xh"
xg"
xf"
xe"
xd"
xc"
xb"
xa"
x`"
x_"
x^"
x]"
x\"
x["
xZ"
xY"
xX"
xW"
xV"
xU"
bx T"
xS"
bx R"
xQ"
bx P"
bx O"
xN"
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
xF"
xE"
xD"
xC"
xB"
xA"
x@"
x?"
x>"
x="
x<"
x;"
x:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
x2"
x1"
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
bx ("
x'"
bx &"
x%"
bx $"
bx #"
x""
x!"
x~
x}
x|
x{
xz
xy
xx
xw
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xg
xf
xe
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
bx Z
xY
bx X
xW
bx V
bx U
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
xD
xC
xB
xA
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
x0
x/
bx .
x-
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
x%
bx $
bx #
x"
bx !
$end
#10
0A
0@
0:
1<
0;
05
17
0F
0K
0P
0T
0^
0c
0h
0m
0r
0w
0|
b0 X
0""
0,"
01"
06"
0;"
0@"
0E"
0J"
b0 &"
0N"
0X"
0]"
0b"
0g"
0l"
0q"
0v"
b0 R"
0z"
0&#
0+#
00#
05#
0:#
0?#
0D#
b0 ~"
0H#
0R#
0W#
0\#
0a#
0f#
0k#
0p#
b0 L#
0t#
0~#
0%$
0*$
0/$
04$
09$
0>$
b0 x#
0B$
0K$
0P$
0U$
0Z$
0_$
0d$
0i$
b0 F$
0m$
06
0E
0J
0O
0S
0W
0b
0g
0l
0q
0v
0{
0!"
0%"
00"
05"
0:"
0?"
0D"
0I"
0M"
0Q"
0\"
0a"
0f"
0k"
0p"
0u"
0y"
0}"
0*#
0/#
04#
09#
0>#
0C#
0G#
0K#
0V#
0[#
0`#
0e#
0j#
0o#
0s#
0w#
0$$
0)$
0.$
03$
08$
0=$
0A$
0E$
0O$
0T$
0Y$
0^$
0c$
0h$
0l$
b111 !
b111 (
b111 ,
12
01
0?
0D
0I
b0 .
0N
0-
0]
0a
0f
0k
0p
0u
b0 Z
0z
0Y
0+"
0/"
04"
09"
0>"
0C"
b0 ("
0H"
0'"
0W"
0["
0`"
0e"
0j"
0o"
b0 T"
0t"
0S"
0%#
0)#
0.#
03#
08#
0=#
b0 "#
0B#
0!#
0Q#
0U#
0Z#
0_#
0d#
0i#
b0 N#
0n#
0M#
0}#
0#$
0($
0-$
02$
07$
b0 z#
0<$
b0 )
0y#
0J$
0N$
0S$
0X$
0]$
0b$
b0 G$
0g$
0"
10
04
19
0>
0C
0H
0M
0R
0\
0`
0e
0j
0o
0t
0y
0~
0*"
0."
03"
08"
0="
0B"
0G"
0L"
0V"
0Z"
0_"
0d"
0i"
0n"
0s"
0x"
0$#
0(#
0-#
02#
07#
0<#
0A#
0F#
0P#
0T#
0Y#
0^#
0c#
0h#
0m#
0r#
0|#
0"$
0'$
0,$
01$
06$
0;$
0@$
0I$
0M$
0R$
0W$
0\$
0a$
0f$
0k$
0/
13
08
0=
0B
0G
0L
0Q
0[
0_
0d
0i
0n
0s
0x
0}
0)"
0-"
02"
07"
0<"
0A"
0F"
0K"
0U"
0Y"
0^"
0c"
0h"
0m"
0r"
0w"
0##
0'#
0,#
01#
06#
0;#
0@#
0E#
0O#
0S#
0X#
0]#
0b#
0g#
0l#
0q#
0{#
0!$
0&$
0+$
00$
05$
0:$
0?$
0H$
0L$
0Q$
0V$
0[$
0`$
0e$
0j$
b101 +
b0 V
b0 $"
b0 P"
b0 |"
b0 J#
b0 v#
b0 D$
b10 *
b0 U
b0 #"
b0 O"
b0 {"
b0 I#
b0 u#
b0 C$
0%
b101 $
b101 '
b10 #
b10 &
#11
1^
1W
b1 )
1-
b1001 X
1m
1;
1S
1l
07
15
1<
1K
1F
b1000010 .
1N
b100100110101 !
b100100110101 (
b110101 ,
0T
b100 Z
1f
14
09
1H
1M
1e
1B
1L
1Q
1d
b1100011 +
b100 V
b11010010 *
b100 U
b10001100011 $
b10001100011 '
b10011010010 #
b10011010010 &
#12
0g
0a
1E
0W
1?
b0 )
0-
0b
0<
1T
0m
1J
0]
0;
1@
0S
0l
07
0A
1F
1D
1K
1^
1c
05
1:
1P
0N
b111 X
1h
b0 Z
0f
06
b11100 .
01
00
04
19
1>
1C
0H
1R
1\
1`
03
18
0L
0Q
0d
b11111110001 !
b11111110001 (
b11110001 ,
12
b11011100 +
b111 V
b10100 *
b0 U
1%
b11111011100 $
b11111011100 '
b10100 #
b10100 &
#13
0J
0D
0E
0?
0O
17
1<
1A
0I
16
1;
0@
1S
1K
1T
0c
b100101 X
1w
b1 &"
1,"
11
15
0:
1F
b10010010110111111 !
b10010010110111111 (
b10111111 ,
0P
b1000011 .
1N
10
14
09
0>
1H
0R
0`
1t
1*"
1/
13
08
1=
0B
1L
b1110011 +
b100101 V
b1 $"
b1001011 *
b10010010101110011 $
b10010010101110011 '
b1001011 #
b1001011 &
#14
0<
0;
05
0W
06
0S
b0 )
0-
0K
0^
1c
0h
b110010 X
1r
b0 &"
0,"
01
17
1P
b0 .
0N
1T
00
1>
0H
0\
1`
0e
1o
0*"
0/
03
0=
0L
1Q
b11001011011010 !
b11001011011010 (
b11011010 ,
02
b1011010 +
b110010 V
b0 $"
b10000000 *
0%
b11001001011010 $
b11001001011010 '
b10000000 #
b10000000 &
#15
1K
1J
1D
1^
0F
1W
1E
12
0T
b1 )
1-
1h
1m
0r
0w
b1001111 X
1|
b100111101100011 !
b100111101100011 (
b1100011 ,
0A
b11000 .
1?
10
0M
1R
1e
1j
0o
0t
1y
1=
1L
b10011011 +
b1001110 V
b11001000 *
b100111010011011 $
b100111010011011 '
b11001000 #
b11001000 &
#1000
