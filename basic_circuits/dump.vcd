$date
	Wed Mar  8 21:22:31 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_CLAv2_8bit $end
$var wire 8 ! sum [7:0] $end
$var wire 1 " cout $end
$var reg 8 # a [7:0] $end
$var reg 8 $ b [7:0] $end
$var reg 1 % cin $end
$scope module cla $end
$var wire 8 & a [7:0] $end
$var wire 8 ' b [7:0] $end
$var wire 1 % cin $end
$var wire 8 ( sum [7:0] $end
$var wire 1 " cout $end
$var wire 1 ) cin_first $end
$scope module u0 $end
$var wire 4 * a [3:0] $end
$var wire 4 + b [3:0] $end
$var wire 1 % cin $end
$var wire 1 ) cout $end
$var wire 4 , sum [3:0] $end
$var wire 4 - p [3:0] $end
$var wire 4 . g [3:0] $end
$var wire 4 / c [3:0] $end
$scope module u0 $end
$var wire 4 0 a [3:0] $end
$var wire 4 1 b [3:0] $end
$var wire 4 2 g [3:0] $end
$var wire 4 3 p [3:0] $end
$upscope $end
$upscope $end
$scope module u1 $end
$var wire 4 4 a [3:0] $end
$var wire 4 5 b [3:0] $end
$var wire 1 ) cin $end
$var wire 1 " cout $end
$var wire 4 6 sum [3:0] $end
$var wire 4 7 p [3:0] $end
$var wire 4 8 g [3:0] $end
$var wire 4 9 c [3:0] $end
$scope module u0 $end
$var wire 4 : a [3:0] $end
$var wire 4 ; b [3:0] $end
$var wire 4 < g [3:0] $end
$var wire 4 = p [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
x)
bx (
bx '
bx &
x%
bx $
bx #
x"
bx !
$end
#10
b0 6
0)
0"
b0 9
b111 !
b111 (
b111 ,
b111 -
b111 3
b0 .
b0 2
b0 7
b0 =
b0 8
b0 <
b101 +
b101 1
b0 5
b0 ;
b10 *
b10 0
b0 4
b0 :
b0 /
0%
b101 $
b101 '
b10 #
b10 &
#30
b10 /
b10 !
b10 (
b10 ,
b0 -
b0 3
b1 .
b1 2
b1 +
b1 1
b1 *
b1 0
b1 $
b1 '
b1 #
b1 &
#50
b10 6
b10 9
b100 .
b100 2
b1 8
b1 <
b101001 !
b101001 (
b1001 ,
b100 +
b100 1
b1 5
b1 ;
b100 *
b100 0
b1 4
b1 :
b1001 /
1%
b10100 $
b10100 '
b10100 #
b10100 &
#70
b111 ,
b10010111 !
b10010111 (
b1001 6
1)
b111 /
b1001 9
b1011 .
b1011 2
b100 8
b100 <
b1011 +
b1011 1
b100 5
b100 ;
b1011 *
b1011 0
b100 4
b100 :
b1001011 $
b1001011 '
b1001011 #
b1001011 &
#90
b0 6
0)
1"
b0 9
b0 .
b0 2
b1000 8
b1000 <
b0 !
b0 (
b0 ,
b0 +
b0 1
b1000 5
b1000 ;
b0 *
b0 0
b1000 4
b1000 :
b0 /
0%
b10000000 $
b10000000 '
b10000000 #
b10000000 &
#110
0"
b1100 ,
b11011100 !
b11011100 (
b1101 6
b1100 -
b1100 3
b1101 7
b1101 =
b0 8
b0 <
b100 +
b100 1
b1 5
b1 ;
b1000 *
b1000 0
b1100 4
b1100 :
b10100 $
b10100 '
b11001000 #
b11001000 &
#1000
