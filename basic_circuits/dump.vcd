$date
	Mon Mar 13 19:57:16 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module CLA_32_bit_block $end
$var wire 32 ! a [31:0] $end
$var wire 32 " b [31:0] $end
$var wire 1 # cin $end
$var wire 1 $ cout $end
$var wire 32 % sum [31:0] $end
$var wire 32 & p [31:0] $end
$var wire 32 ' g [31:0] $end
$var wire 32 ( c [31:0] $end
$scope module u0 $end
$var wire 32 ) a [31:0] $end
$var wire 32 * b [31:0] $end
$var wire 32 + g [31:0] $end
$var wire 32 , p [31:0] $end
$upscope $end
$upscope $end
$scope module tb_lca_bitadder $end
$var wire 64 - sum [63:0] $end
$var wire 1 . cout $end
$var reg 64 / a [63:0] $end
$var reg 64 0 b [63:0] $end
$var reg 1 1 cin $end
$var reg 1 2 clk $end
$var reg 1 3 rst $end
$scope module CLA $end
$var wire 64 4 a [63:0] $end
$var wire 64 5 b [63:0] $end
$var wire 1 1 cin $end
$var wire 1 2 clk $end
$var wire 1 3 rst $end
$var wire 64 6 sum [63:0] $end
$var wire 1 7 cout $end
$var wire 3 8 bit_carry [2:0] $end
$var reg 1 9 cin_r $end
$var reg 1 . cout_r $end
$var reg 64 : sum_r [63:0] $end
$scope module CLA1 $end
$var wire 16 ; a [15:0] $end
$var wire 16 < b [15:0] $end
$var wire 1 9 cin $end
$var wire 1 = cout $end
$var wire 16 > sum [15:0] $end
$var wire 16 ? p [15:0] $end
$var wire 16 @ g [15:0] $end
$var wire 16 A c [15:0] $end
$scope module u0 $end
$var wire 16 B a [15:0] $end
$var wire 16 C b [15:0] $end
$var wire 16 D g [15:0] $end
$var wire 16 E p [15:0] $end
$upscope $end
$upscope $end
$scope module CLA2 $end
$var wire 16 F a [15:0] $end
$var wire 16 G b [15:0] $end
$var wire 1 H cin $end
$var wire 1 I cout $end
$var wire 16 J sum [15:0] $end
$var wire 16 K p [15:0] $end
$var wire 16 L g [15:0] $end
$var wire 16 M c [15:0] $end
$scope module u0 $end
$var wire 16 N a [15:0] $end
$var wire 16 O b [15:0] $end
$var wire 16 P g [15:0] $end
$var wire 16 Q p [15:0] $end
$upscope $end
$upscope $end
$scope module CLA3 $end
$var wire 16 R a [15:0] $end
$var wire 16 S b [15:0] $end
$var wire 1 T cin $end
$var wire 1 U cout $end
$var wire 16 V sum [15:0] $end
$var wire 16 W p [15:0] $end
$var wire 16 X g [15:0] $end
$var wire 16 Y c [15:0] $end
$scope module u0 $end
$var wire 16 Z a [15:0] $end
$var wire 16 [ b [15:0] $end
$var wire 16 \ g [15:0] $end
$var wire 16 ] p [15:0] $end
$upscope $end
$upscope $end
$scope module CLA4 $end
$var wire 16 ^ a [15:0] $end
$var wire 16 _ b [15:0] $end
$var wire 1 ` cin $end
$var wire 1 7 cout $end
$var wire 16 a sum [15:0] $end
$var wire 16 b p [15:0] $end
$var wire 16 c g [15:0] $end
$var wire 16 d c [15:0] $end
$scope module u0 $end
$var wire 16 e a [15:0] $end
$var wire 16 f b [15:0] $end
$var wire 16 g g [15:0] $end
$var wire 16 h p [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module top_4_64 $end
$var wire 64 i a [63:0] $end
$var wire 64 j b [63:0] $end
$var wire 1 k cin $end
$var wire 1 l clk $end
$var wire 1 m rst $end
$var wire 64 n sum [63:0] $end
$var wire 1 o cout $end
$var wire 15 p bit_carry [14:0] $end
$var reg 1 q cin_r $end
$var reg 1 r cout_r $end
$var reg 64 s sum_r [63:0] $end
$scope module CLA1 $end
$var wire 4 t a [3:0] $end
$var wire 4 u b [3:0] $end
$var wire 1 q cin $end
$var wire 1 v cout $end
$var wire 4 w sum [3:0] $end
$var wire 4 x p [3:0] $end
$var wire 4 y g [3:0] $end
$var wire 4 z c [3:0] $end
$scope module u0 $end
$var wire 4 { a [3:0] $end
$var wire 4 | b [3:0] $end
$var wire 4 } g [3:0] $end
$var wire 4 ~ p [3:0] $end
$upscope $end
$upscope $end
$scope module CLA10 $end
$var wire 4 !" a [3:0] $end
$var wire 4 "" b [3:0] $end
$var wire 1 #" cin $end
$var wire 1 $" cout $end
$var wire 4 %" sum [3:0] $end
$var wire 4 &" p [3:0] $end
$var wire 4 '" g [3:0] $end
$var wire 4 (" c [3:0] $end
$scope module u0 $end
$var wire 4 )" a [3:0] $end
$var wire 4 *" b [3:0] $end
$var wire 4 +" g [3:0] $end
$var wire 4 ," p [3:0] $end
$upscope $end
$upscope $end
$scope module CLA11 $end
$var wire 4 -" a [3:0] $end
$var wire 4 ." b [3:0] $end
$var wire 1 /" cin $end
$var wire 1 0" cout $end
$var wire 4 1" sum [3:0] $end
$var wire 4 2" p [3:0] $end
$var wire 4 3" g [3:0] $end
$var wire 4 4" c [3:0] $end
$scope module u0 $end
$var wire 4 5" a [3:0] $end
$var wire 4 6" b [3:0] $end
$var wire 4 7" g [3:0] $end
$var wire 4 8" p [3:0] $end
$upscope $end
$upscope $end
$scope module CLA12 $end
$var wire 4 9" a [3:0] $end
$var wire 4 :" b [3:0] $end
$var wire 1 ;" cin $end
$var wire 1 <" cout $end
$var wire 4 =" sum [3:0] $end
$var wire 4 >" p [3:0] $end
$var wire 4 ?" g [3:0] $end
$var wire 4 @" c [3:0] $end
$scope module u0 $end
$var wire 4 A" a [3:0] $end
$var wire 4 B" b [3:0] $end
$var wire 4 C" g [3:0] $end
$var wire 4 D" p [3:0] $end
$upscope $end
$upscope $end
$scope module CLA13 $end
$var wire 4 E" a [3:0] $end
$var wire 4 F" b [3:0] $end
$var wire 1 G" cin $end
$var wire 1 H" cout $end
$var wire 4 I" sum [3:0] $end
$var wire 4 J" p [3:0] $end
$var wire 4 K" g [3:0] $end
$var wire 4 L" c [3:0] $end
$scope module u0 $end
$var wire 4 M" a [3:0] $end
$var wire 4 N" b [3:0] $end
$var wire 4 O" g [3:0] $end
$var wire 4 P" p [3:0] $end
$upscope $end
$upscope $end
$scope module CLA14 $end
$var wire 4 Q" a [3:0] $end
$var wire 4 R" b [3:0] $end
$var wire 1 S" cin $end
$var wire 1 T" cout $end
$var wire 4 U" sum [3:0] $end
$var wire 4 V" p [3:0] $end
$var wire 4 W" g [3:0] $end
$var wire 4 X" c [3:0] $end
$scope module u0 $end
$var wire 4 Y" a [3:0] $end
$var wire 4 Z" b [3:0] $end
$var wire 4 [" g [3:0] $end
$var wire 4 \" p [3:0] $end
$upscope $end
$upscope $end
$scope module CLA15 $end
$var wire 4 ]" a [3:0] $end
$var wire 4 ^" b [3:0] $end
$var wire 1 _" cin $end
$var wire 1 `" cout $end
$var wire 4 a" sum [3:0] $end
$var wire 4 b" p [3:0] $end
$var wire 4 c" g [3:0] $end
$var wire 4 d" c [3:0] $end
$scope module u0 $end
$var wire 4 e" a [3:0] $end
$var wire 4 f" b [3:0] $end
$var wire 4 g" g [3:0] $end
$var wire 4 h" p [3:0] $end
$upscope $end
$upscope $end
$scope module CLA16 $end
$var wire 4 i" a [3:0] $end
$var wire 4 j" b [3:0] $end
$var wire 1 k" cin $end
$var wire 1 o cout $end
$var wire 4 l" sum [3:0] $end
$var wire 4 m" p [3:0] $end
$var wire 4 n" g [3:0] $end
$var wire 4 o" c [3:0] $end
$scope module u0 $end
$var wire 4 p" a [3:0] $end
$var wire 4 q" b [3:0] $end
$var wire 4 r" g [3:0] $end
$var wire 4 s" p [3:0] $end
$upscope $end
$upscope $end
$scope module CLA2 $end
$var wire 4 t" a [3:0] $end
$var wire 4 u" b [3:0] $end
$var wire 1 v" cin $end
$var wire 1 w" cout $end
$var wire 4 x" sum [3:0] $end
$var wire 4 y" p [3:0] $end
$var wire 4 z" g [3:0] $end
$var wire 4 {" c [3:0] $end
$scope module u0 $end
$var wire 4 |" a [3:0] $end
$var wire 4 }" b [3:0] $end
$var wire 4 ~" g [3:0] $end
$var wire 4 !# p [3:0] $end
$upscope $end
$upscope $end
$scope module CLA3 $end
$var wire 4 "# a [3:0] $end
$var wire 4 ## b [3:0] $end
$var wire 1 $# cin $end
$var wire 1 %# cout $end
$var wire 4 &# sum [3:0] $end
$var wire 4 '# p [3:0] $end
$var wire 4 (# g [3:0] $end
$var wire 4 )# c [3:0] $end
$scope module u0 $end
$var wire 4 *# a [3:0] $end
$var wire 4 +# b [3:0] $end
$var wire 4 ,# g [3:0] $end
$var wire 4 -# p [3:0] $end
$upscope $end
$upscope $end
$scope module CLA4 $end
$var wire 4 .# a [3:0] $end
$var wire 4 /# b [3:0] $end
$var wire 1 0# cin $end
$var wire 1 1# cout $end
$var wire 4 2# sum [3:0] $end
$var wire 4 3# p [3:0] $end
$var wire 4 4# g [3:0] $end
$var wire 4 5# c [3:0] $end
$scope module u0 $end
$var wire 4 6# a [3:0] $end
$var wire 4 7# b [3:0] $end
$var wire 4 8# g [3:0] $end
$var wire 4 9# p [3:0] $end
$upscope $end
$upscope $end
$scope module CLA5 $end
$var wire 4 :# a [3:0] $end
$var wire 4 ;# b [3:0] $end
$var wire 1 <# cin $end
$var wire 1 =# cout $end
$var wire 4 ># sum [3:0] $end
$var wire 4 ?# p [3:0] $end
$var wire 4 @# g [3:0] $end
$var wire 4 A# c [3:0] $end
$scope module u0 $end
$var wire 4 B# a [3:0] $end
$var wire 4 C# b [3:0] $end
$var wire 4 D# g [3:0] $end
$var wire 4 E# p [3:0] $end
$upscope $end
$upscope $end
$scope module CLA6 $end
$var wire 4 F# a [3:0] $end
$var wire 4 G# b [3:0] $end
$var wire 1 H# cin $end
$var wire 1 I# cout $end
$var wire 4 J# sum [3:0] $end
$var wire 4 K# p [3:0] $end
$var wire 4 L# g [3:0] $end
$var wire 4 M# c [3:0] $end
$scope module u0 $end
$var wire 4 N# a [3:0] $end
$var wire 4 O# b [3:0] $end
$var wire 4 P# g [3:0] $end
$var wire 4 Q# p [3:0] $end
$upscope $end
$upscope $end
$scope module CLA7 $end
$var wire 4 R# a [3:0] $end
$var wire 4 S# b [3:0] $end
$var wire 1 T# cin $end
$var wire 1 U# cout $end
$var wire 4 V# sum [3:0] $end
$var wire 4 W# p [3:0] $end
$var wire 4 X# g [3:0] $end
$var wire 4 Y# c [3:0] $end
$scope module u0 $end
$var wire 4 Z# a [3:0] $end
$var wire 4 [# b [3:0] $end
$var wire 4 \# g [3:0] $end
$var wire 4 ]# p [3:0] $end
$upscope $end
$upscope $end
$scope module CLA8 $end
$var wire 4 ^# a [3:0] $end
$var wire 4 _# b [3:0] $end
$var wire 1 `# cin $end
$var wire 1 a# cout $end
$var wire 4 b# sum [3:0] $end
$var wire 4 c# p [3:0] $end
$var wire 4 d# g [3:0] $end
$var wire 4 e# c [3:0] $end
$scope module u0 $end
$var wire 4 f# a [3:0] $end
$var wire 4 g# b [3:0] $end
$var wire 4 h# g [3:0] $end
$var wire 4 i# p [3:0] $end
$upscope $end
$upscope $end
$scope module CLA9 $end
$var wire 4 j# a [3:0] $end
$var wire 4 k# b [3:0] $end
$var wire 1 l# cin $end
$var wire 1 m# cout $end
$var wire 4 n# sum [3:0] $end
$var wire 4 o# p [3:0] $end
$var wire 4 p# g [3:0] $end
$var wire 4 q# c [3:0] $end
$scope module u0 $end
$var wire 4 r# a [3:0] $end
$var wire 4 s# b [3:0] $end
$var wire 4 t# g [3:0] $end
$var wire 4 u# p [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module top_8_64 $end
$var wire 64 v# a [63:0] $end
$var wire 64 w# b [63:0] $end
$var wire 1 x# cin $end
$var wire 1 y# clk $end
$var wire 1 z# rst $end
$var wire 64 {# sum [63:0] $end
$var wire 1 |# cout $end
$var wire 7 }# bit_carry [6:0] $end
$var reg 1 ~# cin_r $end
$var reg 1 !$ cout_r $end
$var reg 64 "$ sum_r [63:0] $end
$scope module CLA1 $end
$var wire 8 #$ a [7:0] $end
$var wire 8 $$ b [7:0] $end
$var wire 1 ~# cin $end
$var wire 1 %$ cout $end
$var wire 8 &$ sum [7:0] $end
$var wire 8 '$ p [7:0] $end
$var wire 8 ($ g [7:0] $end
$var wire 8 )$ c [7:0] $end
$scope module u0 $end
$var wire 8 *$ a [7:0] $end
$var wire 8 +$ b [7:0] $end
$var wire 8 ,$ g [7:0] $end
$var wire 8 -$ p [7:0] $end
$upscope $end
$upscope $end
$scope module CLA2 $end
$var wire 8 .$ a [7:0] $end
$var wire 8 /$ b [7:0] $end
$var wire 1 0$ cin $end
$var wire 1 1$ cout $end
$var wire 8 2$ sum [7:0] $end
$var wire 8 3$ p [7:0] $end
$var wire 8 4$ g [7:0] $end
$var wire 8 5$ c [7:0] $end
$scope module u0 $end
$var wire 8 6$ a [7:0] $end
$var wire 8 7$ b [7:0] $end
$var wire 8 8$ g [7:0] $end
$var wire 8 9$ p [7:0] $end
$upscope $end
$upscope $end
$scope module CLA3 $end
$var wire 8 :$ a [7:0] $end
$var wire 8 ;$ b [7:0] $end
$var wire 1 <$ cin $end
$var wire 1 =$ cout $end
$var wire 8 >$ sum [7:0] $end
$var wire 8 ?$ p [7:0] $end
$var wire 8 @$ g [7:0] $end
$var wire 8 A$ c [7:0] $end
$scope module u0 $end
$var wire 8 B$ a [7:0] $end
$var wire 8 C$ b [7:0] $end
$var wire 8 D$ g [7:0] $end
$var wire 8 E$ p [7:0] $end
$upscope $end
$upscope $end
$scope module CLA4 $end
$var wire 8 F$ a [7:0] $end
$var wire 8 G$ b [7:0] $end
$var wire 1 H$ cin $end
$var wire 1 I$ cout $end
$var wire 8 J$ sum [7:0] $end
$var wire 8 K$ p [7:0] $end
$var wire 8 L$ g [7:0] $end
$var wire 8 M$ c [7:0] $end
$scope module u0 $end
$var wire 8 N$ a [7:0] $end
$var wire 8 O$ b [7:0] $end
$var wire 8 P$ g [7:0] $end
$var wire 8 Q$ p [7:0] $end
$upscope $end
$upscope $end
$scope module CLA5 $end
$var wire 8 R$ a [7:0] $end
$var wire 8 S$ b [7:0] $end
$var wire 1 T$ cin $end
$var wire 1 U$ cout $end
$var wire 8 V$ sum [7:0] $end
$var wire 8 W$ p [7:0] $end
$var wire 8 X$ g [7:0] $end
$var wire 8 Y$ c [7:0] $end
$scope module u0 $end
$var wire 8 Z$ a [7:0] $end
$var wire 8 [$ b [7:0] $end
$var wire 8 \$ g [7:0] $end
$var wire 8 ]$ p [7:0] $end
$upscope $end
$upscope $end
$scope module CLA6 $end
$var wire 8 ^$ a [7:0] $end
$var wire 8 _$ b [7:0] $end
$var wire 1 `$ cin $end
$var wire 1 a$ cout $end
$var wire 8 b$ sum [7:0] $end
$var wire 8 c$ p [7:0] $end
$var wire 8 d$ g [7:0] $end
$var wire 8 e$ c [7:0] $end
$scope module u0 $end
$var wire 8 f$ a [7:0] $end
$var wire 8 g$ b [7:0] $end
$var wire 8 h$ g [7:0] $end
$var wire 8 i$ p [7:0] $end
$upscope $end
$upscope $end
$scope module CLA7 $end
$var wire 8 j$ a [7:0] $end
$var wire 8 k$ b [7:0] $end
$var wire 1 l$ cin $end
$var wire 1 m$ cout $end
$var wire 8 n$ sum [7:0] $end
$var wire 8 o$ p [7:0] $end
$var wire 8 p$ g [7:0] $end
$var wire 8 q$ c [7:0] $end
$scope module u0 $end
$var wire 8 r$ a [7:0] $end
$var wire 8 s$ b [7:0] $end
$var wire 8 t$ g [7:0] $end
$var wire 8 u$ p [7:0] $end
$upscope $end
$upscope $end
$scope module CLA8 $end
$var wire 8 v$ a [7:0] $end
$var wire 8 w$ b [7:0] $end
$var wire 1 x$ cin $end
$var wire 1 |# cout $end
$var wire 8 y$ sum [7:0] $end
$var wire 8 z$ p [7:0] $end
$var wire 8 {$ g [7:0] $end
$var wire 8 |$ c [7:0] $end
$scope module u0 $end
$var wire 8 }$ a [7:0] $end
$var wire 8 ~$ b [7:0] $end
$var wire 8 !% g [7:0] $end
$var wire 8 "% p [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx "%
bx !%
bz ~$
bz }$
bx |$
bx {$
bx z$
bx y$
xx$
bz w$
bz v$
bx u$
bx t$
bz s$
bz r$
bx q$
bx p$
bx o$
bx n$
xm$
xl$
bz k$
bz j$
bx i$
bx h$
bz g$
bz f$
bx e$
bx d$
bx c$
bx b$
xa$
x`$
bz _$
bz ^$
bx ]$
bx \$
bz [$
bz Z$
bx Y$
bx X$
bx W$
bx V$
xU$
xT$
bz S$
bz R$
bx Q$
bx P$
bz O$
bz N$
bx M$
bx L$
bx K$
bx J$
xI$
xH$
bz G$
bz F$
bx E$
bx D$
bz C$
bz B$
bx A$
bx @$
bx ?$
bx >$
x=$
x<$
bz ;$
bz :$
bx 9$
bx 8$
bz 7$
bz 6$
bx 5$
bx 4$
bx 3$
bx 2$
x1$
x0$
bz /$
bz .$
bx -$
bx ,$
bz +$
bz *$
bx )$
bx ($
bx '$
bx &$
x%$
bz $$
bz #$
bx "$
x!$
x~#
bx }#
x|#
bx {#
zz#
zy#
zx#
bz w#
bz v#
bx u#
bx t#
bz s#
bz r#
bx q#
bx p#
bx o#
bx n#
xm#
xl#
bz k#
bz j#
bx i#
bx h#
bz g#
bz f#
bx e#
bx d#
bx c#
bx b#
xa#
x`#
bz _#
bz ^#
bx ]#
bx \#
bz [#
bz Z#
bx Y#
bx X#
bx W#
bx V#
xU#
xT#
bz S#
bz R#
bx Q#
bx P#
bz O#
bz N#
bx M#
bx L#
bx K#
bx J#
xI#
xH#
bz G#
bz F#
bx E#
bx D#
bz C#
bz B#
bx A#
bx @#
bx ?#
bx >#
x=#
x<#
bz ;#
bz :#
bx 9#
bx 8#
bz 7#
bz 6#
bx 5#
bx 4#
bx 3#
bx 2#
x1#
x0#
bz /#
bz .#
bx -#
bx ,#
bz +#
bz *#
bx )#
bx (#
bx '#
bx &#
x%#
x$#
bz ##
bz "#
bx !#
bx ~"
bz }"
bz |"
bx {"
bx z"
bx y"
bx x"
xw"
xv"
bz u"
bz t"
bx s"
bx r"
bz q"
bz p"
bx o"
bx n"
bx m"
bx l"
xk"
bz j"
bz i"
bx h"
bx g"
bz f"
bz e"
bx d"
bx c"
bx b"
bx a"
x`"
x_"
bz ^"
bz ]"
bx \"
bx ["
bz Z"
bz Y"
bx X"
bx W"
bx V"
bx U"
xT"
xS"
bz R"
bz Q"
bx P"
bx O"
bz N"
bz M"
bx L"
bx K"
bx J"
bx I"
xH"
xG"
bz F"
bz E"
bx D"
bx C"
bz B"
bz A"
bx @"
bx ?"
bx >"
bx ="
x<"
x;"
bz :"
bz 9"
bx 8"
bx 7"
bz 6"
bz 5"
bx 4"
bx 3"
bx 2"
bx 1"
x0"
x/"
bz ."
bz -"
bx ,"
bx +"
bz *"
bz )"
bx ("
bx '"
bx &"
bx %"
x$"
x#"
bz ""
bz !"
bx ~
bx }
bz |
bz {
bx z
bx y
bx x
bx w
xv
bz u
bz t
bx s
xr
xq
bx p
xo
bx n
zm
zl
zk
bz j
bz i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
x`
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
xU
xT
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
xI
xH
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
x=
bx <
bx ;
bx :
x9
bx 8
x7
bx 6
bx 5
bx 4
x3
02
x1
bx 0
bx /
x.
bx -
bx ,
bx +
bz *
bz )
bxz (
bx '
bx &
bx %
x$
z#
bz "
bz !
$end
#10
09
b111 >
b0 J
b0 V
b111 6
b0 a
0H
0T
0`
0=
b0 A
0I
b0 M
b0 8
0U
b0 Y
07
b0 d
b111 ?
b111 E
b0 @
b0 D
b0 K
b0 Q
b0 L
b0 P
b0 W
b0 ]
b0 X
b0 \
b0 b
b0 h
b0 c
b0 g
b101 <
b101 C
b0 G
b0 O
b0 S
b0 [
b0 _
b0 f
b10 ;
b10 B
b0 F
b0 N
b0 R
b0 Z
b0 ^
b0 e
01
b101 0
b101 5
b10 /
b10 4
12
#20
02
#30
0.
b111 -
b111 :
b10 6
b10 >
b10 A
b0 ?
b0 E
b1 @
b1 D
b1 <
b1 C
b1 ;
b1 B
12
b1 0
b1 5
b1 /
b1 4
#40
02
#50
19
b10 -
b10 :
b101001 6
b101001 >
b101001 A
b10100 @
b10100 D
b10100 <
b10100 C
b10100 ;
b10100 B
12
11
b10100 0
b10100 5
b10100 /
b10100 4
#60
02
#70
b101001 -
b101001 :
b10010111 6
b10010111 >
b10010111 A
b1001011 @
b1001011 D
b1001011 <
b1001011 C
b1001011 ;
b1001011 B
12
b1001011 0
b1001011 5
b1001011 /
b1001011 4
#80
02
#90
09
b10010111 -
b10010111 :
b100000000 6
b100000000 >
b100000000 A
b10000000 @
b10000000 D
b10000000 <
b10000000 C
b10000000 ;
b10000000 B
12
01
b10000000 0
b10000000 5
b10000000 /
b10000000 4
#100
02
#110
b100000000 -
b100000000 :
b11011100 6
b11011100 >
b0 A
b11011100 ?
b11011100 E
b0 @
b0 D
b10100 <
b10100 C
b11001000 ;
b11001000 B
12
b10100 0
b10100 5
b11001000 /
b11001000 4
#120
02
#130
19
b11011100 -
b11011100 :
b1111101111100110 >
b1111111110011 A
b101110001111101111100110 6
b10111000 J
b1100 M
b1110010000010101 ?
b1110010000010101 E
b101111101000 @
b101111101000 D
b10110100 K
b10110100 Q
b10 L
b10 P
b1110101111111001 <
b1110101111111001 C
b10010110 G
b10010110 O
b111111101100 ;
b111111101100 B
b100010 F
b100010 N
12
11
b100101101110101111111001 0
b100101101110101111111001 5
b1000100000111111101100 /
b1000100000111111101100 4
#140
02
#150
b101110001111101111100101 6
b1111101111100101 >
b1111111110000 A
09
b101110001111101111100110 -
b101110001111101111100110 :
12
01
#160
02
#170
b101110001111101111100101 -
b101110001111101111100101 :
12
#180
02
#190
12
#200
02
#210
12
#220
02
#230
12
#240
02
#250
12
#260
02
#270
12
#280
02
#290
12
#300
02
#310
12
#320
02
#330
12
#340
02
#350
12
#360
02
#370
12
#380
02
#390
12
#400
02
#410
12
#420
02
#430
12
#440
02
#450
12
#460
02
#470
12
#480
02
#490
12
#500
02
#510
12
#520
02
#530
12
#540
02
#550
12
#560
02
#570
12
#580
02
#590
12
#600
02
#610
12
#620
02
#630
12
#640
02
#650
12
#660
02
#670
12
#680
02
#690
12
#700
02
#710
12
#720
02
#730
12
#740
02
#750
12
#760
02
#770
12
#780
02
#790
12
#800
02
#810
12
#820
02
#830
12
#840
02
#850
12
#860
02
#870
12
#880
02
#890
12
#900
02
#910
12
#920
02
#930
12
#940
02
#950
12
#960
02
#970
12
#980
02
#990
12
#1000
02
