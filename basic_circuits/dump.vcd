$date
	Fri Mar  3 16:10:16 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_c_select_adder_8 $end
$var wire 8 ! sum [7:0] $end
$var wire 1 " cout $end
$var reg 8 # a [7:0] $end
$var reg 8 $ b [7:0] $end
$var reg 1 % cin $end
$scope module csa $end
$var wire 8 & a [7:0] $end
$var wire 8 ' b [7:0] $end
$var wire 1 % cin $end
$var wire 8 ( sum_2 [7:0] $end
$var wire 8 ) sum_1 [7:0] $end
$var wire 8 * sum [7:0] $end
$var wire 1 " cout $end
$var wire 8 + bit_carry_1 [7:0] $end
$var wire 8 , bit_carry [7:0] $end
$scope module adder1 $end
$var wire 1 - a $end
$var wire 1 . b $end
$var wire 1 / c_out $end
$var wire 1 0 cin $end
$var wire 1 1 sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 2 a $end
$var wire 1 3 b $end
$var wire 1 4 c_out $end
$var wire 1 5 cin $end
$var wire 1 6 sum $end
$upscope $end
$scope module adder3 $end
$var wire 1 7 a $end
$var wire 1 8 b $end
$var wire 1 9 c_out $end
$var wire 1 : cin $end
$var wire 1 ; sum $end
$upscope $end
$scope module adder4 $end
$var wire 1 < a $end
$var wire 1 = b $end
$var wire 1 > c_out $end
$var wire 1 ? cin $end
$var wire 1 @ sum $end
$upscope $end
$scope module adder5 $end
$var wire 1 A a $end
$var wire 1 B b $end
$var wire 1 C c_out $end
$var wire 1 D cin $end
$var wire 1 E sum $end
$upscope $end
$scope module adder6 $end
$var wire 1 F a $end
$var wire 1 G b $end
$var wire 1 H c_out $end
$var wire 1 I cin $end
$var wire 1 J sum $end
$upscope $end
$scope module adder7 $end
$var wire 1 K a $end
$var wire 1 L b $end
$var wire 1 M c_out $end
$var wire 1 N cin $end
$var wire 1 O sum $end
$upscope $end
$scope module adder8 $end
$var wire 1 P a $end
$var wire 1 Q b $end
$var wire 1 R c_out $end
$var wire 1 S cin $end
$var wire 1 T sum $end
$upscope $end
$scope module adder_1_1 $end
$var wire 1 U a $end
$var wire 1 V b $end
$var wire 1 W c_out $end
$var wire 1 X cin $end
$var wire 1 Y sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 Z a $end
$var wire 1 [ b $end
$var wire 1 \ c_out $end
$var wire 1 ] cin $end
$var wire 1 ^ sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 _ a $end
$var wire 1 ` b $end
$var wire 1 a c_out $end
$var wire 1 b cin $end
$var wire 1 c sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 d a $end
$var wire 1 e b $end
$var wire 1 f c_out $end
$var wire 1 g cin $end
$var wire 1 h sum $end
$upscope $end
$scope module adder_1_5 $end
$var wire 1 i a $end
$var wire 1 j b $end
$var wire 1 k c_out $end
$var wire 1 l cin $end
$var wire 1 m sum $end
$upscope $end
$scope module adder_1_6 $end
$var wire 1 n a $end
$var wire 1 o b $end
$var wire 1 p c_out $end
$var wire 1 q cin $end
$var wire 1 r sum $end
$upscope $end
$scope module adder_1_7 $end
$var wire 1 s a $end
$var wire 1 t b $end
$var wire 1 u c_out $end
$var wire 1 v cin $end
$var wire 1 w sum $end
$upscope $end
$scope module adder_1_8 $end
$var wire 1 x a $end
$var wire 1 y b $end
$var wire 1 z c_out $end
$var wire 1 { cin $end
$var wire 1 | sum $end
$upscope $end
$scope module mul_1 $end
$var wire 1 } a $end
$var wire 1 ~ b $end
$var wire 1 % sel $end
$var wire 1 " out $end
$upscope $end
$scope module mul_8 $end
$var wire 8 !" a [7:0] $end
$var wire 8 "" b [7:0] $end
$var wire 1 % sel $end
$var wire 8 #" out [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx #"
bx ""
bx !"
x~
x}
x|
x{
xz
xy
xx
xw
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xg
xf
xe
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
0X
xW
xV
xU
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
xD
xC
xB
xA
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
10
x/
x.
x-
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
x%
bx $
bx #
x"
bx !
$end
#10
1@
0h
1?
0g
19
0a
0;
1c
1:
0b
14
0\
06
0E
0J
0O
0T
1^
0m
0r
0w
0|
0"
15
0D
0I
0N
0S
0}
b111 !
b111 *
b111 #"
0]
0l
0q
0v
0{
0~
b1000 )
b1000 !"
01
1/
0>
0C
0H
0M
b111 ,
0R
b111 (
b111 ""
1Y
0W
0f
0k
0p
0u
b0 +
0z
1.
03
18
0=
0B
0G
0L
0Q
1V
0[
1`
0e
0j
0o
0t
0y
0-
12
07
0<
0A
0F
0K
0P
0U
1Z
0_
0d
0i
0n
0s
0x
0%
b101 $
b101 '
b10 #
b10 &
#30
0@
0?
0:
09
b1 ,
04
1]
b10 !
b10 *
b10 #"
0;
0c
11
b11 )
b11 !"
16
0Y
b1 +
1W
b10 (
b10 ""
1^
08
0`
1-
02
1U
0Z
b1 $
b1 '
b1 #
b1 &
#50
06
1@
b101001 )
b101001 !"
1J
0^
1h
b101000 (
b101000 ""
1r
05
1?
1I
0]
1g
1q
0/
19
b10100 ,
1C
0W
1a
b10100 +
1k
b101001 !
b101001 *
b101001 #"
0.
18
1B
0V
1`
1j
0-
17
1A
0U
1_
1i
1%
b10100 $
b10100 '
b10100 #
b10100 &
#70
b10010111 !
b10010111 *
b10010111 #"
16
1;
0@
1E
0J
b10010111 )
b10010111 !"
1T
1^
1c
0h
1m
0r
b10010110 (
b10010110 ""
1|
15
1:
0?
1D
0I
1S
1]
1b
0g
1l
0q
1{
1/
14
09
1>
0C
b1001011 ,
1M
1W
1\
0a
1f
0k
b1001011 +
1u
1.
13
08
1=
0B
1L
1V
1[
0`
1e
0j
1t
1-
12
07
1<
0A
1K
1U
1Z
0_
1d
0i
1s
b1001011 $
b1001011 '
b1001011 #
b1001011 &
#90
06
0;
0E
b1 )
b1 !"
0T
0^
0c
0m
b0 (
b0 ""
0|
1"
05
0:
0D
0S
1}
0]
0b
0l
0{
1~
0/
04
0>
0M
b10000000 ,
1R
0W
0\
0f
0u
b10000000 +
1z
b0 !
b0 *
b0 #"
0.
03
0=
0L
1Q
0V
0[
0e
0t
1y
0-
02
0<
0K
1P
0U
0Z
0d
0s
1x
0%
b10000000 $
b10000000 '
b10000000 #
b10000000 &
#110
0"
0}
0~
b11011100 !
b11011100 *
b11011100 #"
1;
1E
1T
b0 ,
0R
1c
1m
1|
b0 +
0z
1@
b11011101 )
b11011101 !"
1O
1h
b11011100 (
b11011100 ""
1w
18
1B
0Q
1`
1j
0y
1<
1K
1d
1s
b10100 $
b10100 '
b11001000 #
b11001000 &
#1000
