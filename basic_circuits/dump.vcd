$date
	Sun Mar  5 22:31:41 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_c_select_adder_8 $end
$var wire 8 ! sum [7:0] $end
$var wire 1 " cout $end
$var reg 8 # a [7:0] $end
$var reg 8 $ b [7:0] $end
$var reg 1 % cin $end
$scope module csa $end
$var wire 8 & a [7:0] $end
$var wire 8 ' b [7:0] $end
$var wire 1 % cin $end
$var wire 8 ( sum [7:0] $end
$var wire 1 ) cout_first $end
$var wire 1 " cout $end
$scope module cs1 $end
$var wire 4 * a [3:0] $end
$var wire 4 + b [3:0] $end
$var wire 1 % cin $end
$var wire 4 , sum_2 [3:0] $end
$var wire 4 - sum_1 [3:0] $end
$var wire 4 . sum [3:0] $end
$var wire 1 ) cout $end
$var wire 4 / bit_carry_1 [3:0] $end
$var wire 4 0 bit_carry [3:0] $end
$scope module adder1 $end
$var wire 1 1 a $end
$var wire 1 2 b $end
$var wire 1 3 c_out $end
$var wire 1 4 cin $end
$var wire 1 5 sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 6 a $end
$var wire 1 7 b $end
$var wire 1 8 c_out $end
$var wire 1 9 cin $end
$var wire 1 : sum $end
$upscope $end
$scope module adder3 $end
$var wire 1 ; a $end
$var wire 1 < b $end
$var wire 1 = c_out $end
$var wire 1 > cin $end
$var wire 1 ? sum $end
$upscope $end
$scope module adder4 $end
$var wire 1 @ a $end
$var wire 1 A b $end
$var wire 1 B c_out $end
$var wire 1 C cin $end
$var wire 1 D sum $end
$upscope $end
$scope module adder_1_1 $end
$var wire 1 E a $end
$var wire 1 F b $end
$var wire 1 G c_out $end
$var wire 1 H cin $end
$var wire 1 I sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 J a $end
$var wire 1 K b $end
$var wire 1 L c_out $end
$var wire 1 M cin $end
$var wire 1 N sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 O a $end
$var wire 1 P b $end
$var wire 1 Q c_out $end
$var wire 1 R cin $end
$var wire 1 S sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 T a $end
$var wire 1 U b $end
$var wire 1 V c_out $end
$var wire 1 W cin $end
$var wire 1 X sum $end
$upscope $end
$scope module mul_1 $end
$var wire 1 Y a $end
$var wire 1 Z b $end
$var wire 1 % sel $end
$var wire 1 ) out $end
$upscope $end
$scope module mul_8 $end
$var wire 4 [ a [3:0] $end
$var wire 4 \ b [3:0] $end
$var wire 1 % sel $end
$var wire 4 ] out [3:0] $end
$upscope $end
$upscope $end
$scope module cs2 $end
$var wire 4 ^ a [3:0] $end
$var wire 4 _ b [3:0] $end
$var wire 1 ) cin $end
$var wire 4 ` sum_2 [3:0] $end
$var wire 4 a sum_1 [3:0] $end
$var wire 4 b sum [3:0] $end
$var wire 1 " cout $end
$var wire 4 c bit_carry_1 [3:0] $end
$var wire 4 d bit_carry [3:0] $end
$scope module adder1 $end
$var wire 1 e a $end
$var wire 1 f b $end
$var wire 1 g c_out $end
$var wire 1 h cin $end
$var wire 1 i sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 j a $end
$var wire 1 k b $end
$var wire 1 l c_out $end
$var wire 1 m cin $end
$var wire 1 n sum $end
$upscope $end
$scope module adder3 $end
$var wire 1 o a $end
$var wire 1 p b $end
$var wire 1 q c_out $end
$var wire 1 r cin $end
$var wire 1 s sum $end
$upscope $end
$scope module adder4 $end
$var wire 1 t a $end
$var wire 1 u b $end
$var wire 1 v c_out $end
$var wire 1 w cin $end
$var wire 1 x sum $end
$upscope $end
$scope module adder_1_1 $end
$var wire 1 y a $end
$var wire 1 z b $end
$var wire 1 { c_out $end
$var wire 1 | cin $end
$var wire 1 } sum $end
$upscope $end
$scope module adder_1_2 $end
$var wire 1 ~ a $end
$var wire 1 !" b $end
$var wire 1 "" c_out $end
$var wire 1 #" cin $end
$var wire 1 $" sum $end
$upscope $end
$scope module adder_1_3 $end
$var wire 1 %" a $end
$var wire 1 &" b $end
$var wire 1 '" c_out $end
$var wire 1 (" cin $end
$var wire 1 )" sum $end
$upscope $end
$scope module adder_1_4 $end
$var wire 1 *" a $end
$var wire 1 +" b $end
$var wire 1 ," c_out $end
$var wire 1 -" cin $end
$var wire 1 ." sum $end
$upscope $end
$scope module mul_1 $end
$var wire 1 /" a $end
$var wire 1 0" b $end
$var wire 1 ) sel $end
$var wire 1 " out $end
$upscope $end
$scope module mul_8 $end
$var wire 4 1" a [3:0] $end
$var wire 4 2" b [3:0] $end
$var wire 1 ) sel $end
$var wire 4 3" out [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 3"
bx 2"
bx 1"
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
x$"
x#"
x""
x!"
x~
x}
0|
x{
xz
xy
xx
xw
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
1h
xg
xf
xe
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
xZ
xY
xX
xW
xV
xU
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
0H
xG
xF
xE
xD
xC
xB
xA
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
14
x3
x2
x1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
x)
bx (
bx '
bx &
x%
bx $
bx #
x"
bx !
$end
#10
1D
0X
1C
0W
1=
0Q
0?
1S
1>
0R
18
0L
b0 b
b0 3"
0:
1N
0)
0n
0s
0x
0$"
0)"
0."
0"
19
0Y
b111 !
b111 (
b111 .
b111 ]
0M
0Z
0m
0r
0w
0/"
0#"
0("
0-"
00"
b1000 -
b1000 [
05
13
b111 0
0B
b111 ,
b111 \
1I
0G
b0 /
0V
b1 a
b1 1"
1i
0g
0l
0q
b0 d
0v
b0 `
b0 2"
0}
0{
0""
0'"
b0 c
0,"
12
07
1<
0A
1F
0K
1P
0U
0f
0k
0p
0u
0z
0!"
0&"
0+"
01
16
0;
0@
0E
1J
0O
0T
0e
0j
0o
0t
0y
0~
0%"
0*"
b101 +
b0 _
b10 *
b0 ^
0%
b101 $
b101 '
b10 #
b10 &
#30
0D
0C
0>
0=
b1 0
08
1M
b10 !
b10 (
b10 .
b10 ]
0?
0S
15
b11 -
b11 [
1:
0I
b1 /
1G
b10 ,
b10 \
1N
0<
0P
11
06
1E
0J
b1 +
b1 *
b1 $
b1 '
b1 #
b1 &
#50
b10 b
b10 3"
0:
b1001 -
b1001 [
1D
0N
b1000 ,
b1000 \
1X
b11 a
b11 1"
1n
b10 `
b10 2"
1$"
09
1C
0M
1W
1m
1#"
03
b100 0
1=
0G
b100 /
1Q
b1 d
1g
b1 c
1{
02
1<
0F
1P
1f
1z
01
1;
0E
1O
1e
1y
b101001 !
b101001 (
b1001 .
b1001 ]
b100 +
b1 _
b100 *
b1 ^
1%
b10100 $
b10100 '
b10100 #
b10100 &
#70
b111 .
b111 ]
b10010111 !
b10010111 (
b1001 b
b1001 3"
1:
1?
b111 -
b111 [
0D
1)
1N
1S
b110 ,
b110 \
0X
0n
b1001 a
b1001 1"
1x
0$"
b1000 `
b1000 2"
1."
19
1>
0C
1Y
1M
1R
0W
1Z
0m
1w
0#"
1-"
13
18
0=
b1011 0
1B
1G
1L
0Q
b1011 /
1V
0g
b100 d
1q
0{
b100 c
1'"
12
17
0<
1A
1F
1K
0P
1U
0f
1p
0z
1&"
11
16
0;
1@
1E
1J
0O
1T
0e
1o
0y
1%"
b1011 +
b100 _
b1011 *
b100 ^
b1001011 $
b1001011 '
b1001011 #
b1001011 &
#90
b0 b
b0 3"
0:
b1 -
b1 [
0?
0N
b0 ,
b0 \
0S
0)
b1 a
b1 1"
0x
1"
b0 `
b0 2"
0."
09
0>
0Y
0M
0R
0Z
0w
1/"
0-"
10"
03
08
b0 0
0B
0G
0L
b0 /
0V
0q
b1000 d
1v
0'"
b1000 c
1,"
02
07
0A
0F
0K
0U
0p
1u
0&"
1+"
01
06
0@
0E
0J
0T
0o
1t
0%"
1*"
b0 !
b0 (
b0 .
b0 ]
b0 +
b1000 _
b0 *
b1000 ^
0%
b10000000 $
b10000000 '
b10000000 #
b10000000 &
#110
1n
1m
0"
1g
0/"
00"
b1100 .
b1100 ]
b11011100 !
b11011100 (
b1101 b
b1101 3"
1?
1S
0i
1x
b1 d
0v
1}
1."
b0 c
0,"
b1101 -
b1101 [
1D
b1100 ,
b1100 \
1X
b1110 a
b1110 1"
1s
b1101 `
b1101 2"
1)"
1<
1P
1f
0u
1z
0+"
1@
1T
1o
1%"
b100 +
b1 _
b1000 *
b1100 ^
b10100 $
b10100 '
b11001000 #
b11001000 &
#1000
