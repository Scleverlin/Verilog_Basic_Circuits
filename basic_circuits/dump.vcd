$date
	Wed Mar 15 18:09:08 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module CLA_32_bit_block $end
$var wire 32 ! a [31:0] $end
$var wire 32 " b [31:0] $end
$var wire 1 # cin $end
$var wire 1 $ cout $end
$var wire 32 % sum [31:0] $end
$var wire 32 & p [31:0] $end
$var wire 32 ' g [31:0] $end
$var wire 32 ( c [31:0] $end
$scope module u0 $end
$var wire 32 ) a [31:0] $end
$var wire 32 * b [31:0] $end
$var wire 32 + g [31:0] $end
$var wire 32 , p [31:0] $end
$upscope $end
$upscope $end
$scope module CLA_4_bit_block $end
$var wire 4 - a [3:0] $end
$var wire 4 . b [3:0] $end
$var wire 1 / cin $end
$var wire 1 0 cout $end
$var wire 4 1 sum [3:0] $end
$var wire 4 2 p [3:0] $end
$var wire 4 3 g [3:0] $end
$var wire 4 4 c [3:0] $end
$scope module u0 $end
$var wire 4 5 a [3:0] $end
$var wire 4 6 b [3:0] $end
$var wire 4 7 g [3:0] $end
$var wire 4 8 p [3:0] $end
$upscope $end
$upscope $end
$scope module CLA_8_bit_block $end
$var wire 8 9 a [7:0] $end
$var wire 8 : b [7:0] $end
$var wire 1 ; cin $end
$var wire 1 < cout $end
$var wire 8 = sum [7:0] $end
$var wire 8 > p [7:0] $end
$var wire 8 ? g [7:0] $end
$var wire 8 @ c [7:0] $end
$scope module u0 $end
$var wire 8 A a [7:0] $end
$var wire 8 B b [7:0] $end
$var wire 8 C g [7:0] $end
$var wire 8 D p [7:0] $end
$upscope $end
$upscope $end
$scope module tb_CLAv2_8bit $end
$var wire 16 E sum [15:0] $end
$var wire 1 F cout $end
$var reg 16 G a [15:0] $end
$var reg 16 H b [15:0] $end
$var reg 1 I cin $end
$scope module cla $end
$var wire 16 J a [15:0] $end
$var wire 16 K b [15:0] $end
$var wire 1 I cin $end
$var wire 1 F cout $end
$var wire 16 L sum [15:0] $end
$var wire 16 M p [15:0] $end
$var wire 16 N g [15:0] $end
$var wire 16 O c [15:0] $end
$scope module u0 $end
$var wire 16 P a [15:0] $end
$var wire 16 Q b [15:0] $end
$var wire 16 R g [15:0] $end
$var wire 16 S p [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
xI
bx H
bx G
xF
bx E
bx D
bx C
bz B
bz A
bxz @
bx ?
bx >
bx =
x<
z;
bz :
bz 9
bx 8
bx 7
bz 6
bz 5
bxz 4
bx 3
bx 2
bx 1
x0
z/
bz .
bz -
bx ,
bx +
bz *
bz )
bxz (
bx '
bx &
bx %
x$
z#
bz "
bz !
$end
#10
0F
b111 E
b111 L
b111 M
b111 S
b0 N
b0 R
b0 O
0I
b101 H
b101 K
b101 Q
b10 G
b10 J
b10 P
#30
b10 O
b10 E
b10 L
b0 M
b0 S
b1 N
b1 R
b1 H
b1 K
b1 Q
b1 G
b1 J
b1 P
#50
b101001 E
b101001 L
b10100 N
b10100 R
b101001 O
1I
b10100 H
b10100 K
b10100 Q
b10100 G
b10100 J
b10100 P
#70
b10010111 E
b10010111 L
b10010111 O
b1001011 N
b1001011 R
b1001011 H
b1001011 K
b1001011 Q
b1001011 G
b1001011 J
b1001011 P
#90
b100000000 E
b100000000 L
b10000000 N
b10000000 R
b100000000 O
0I
b10000000 H
b10000000 K
b10000000 Q
b10000000 G
b10000000 J
b10000000 P
#110
b0 O
b11011100 E
b11011100 L
b11011100 M
b11011100 S
b0 N
b0 R
b10100 H
b10100 K
b10100 Q
b11001000 G
b11001000 J
b11001000 P
#130
b100000000000 O
b100000000000 E
b100000000000 L
b0 M
b0 S
b10000000000 N
b10000000000 R
b10000000000 H
b10000000000 K
b10000000000 Q
b10000000000 G
b10000000000 J
b10000000000 P
#150
b1000000000000 E
b1000000000000 L
b1000000000000 O
b100000000000 N
b100000000000 R
b100000000000 H
b100000000000 K
b100000000000 Q
b100000000000 G
b100000000000 J
b100000000000 P
#170
b10000000000000 E
b10000000000000 L
b10000000000000 O
b1000000000000 N
b1000000000000 R
b1000000000000 H
b1000000000000 K
b1000000000000 Q
b1000000000000 G
b1000000000000 J
b1000000000000 P
#190
b100000000000000 E
b100000000000000 L
b100000000000000 O
b10000000000000 N
b10000000000000 R
b10000000000000 H
b10000000000000 K
b10000000000000 Q
b10000000000000 G
b10000000000000 J
b10000000000000 P
#210
b1000000000000000 E
b1000000000000000 L
b1000000000000000 O
b100000000000000 N
b100000000000000 R
b100000000000000 H
b100000000000000 K
b100000000000000 Q
b100000000000000 G
b100000000000000 J
b100000000000000 P
#230
b1111111100000 O
b1000010000110 E
b1000010000110 L
b111101100110 M
b111101100110 S
b10010000 N
b10010000 R
b100010110110 H
b100010110110 K
b100010110110 Q
b11111010000 G
b11111010000 J
b11111010000 P
#1000
