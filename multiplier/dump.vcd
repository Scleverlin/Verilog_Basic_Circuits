$date
	Tue Sep 12 03:58:21 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_mul_32bit $end
$var wire 64 ! out [63:0] $end
$var reg 32 " a [31:0] $end
$var reg 32 # b [31:0] $end
$scope module u0 $end
$var wire 32 $ a [31:0] $end
$var wire 32 % b [31:0] $end
$var wire 64 & out2 [63:0] $end
$var wire 64 ' out1 [63:0] $end
$var wire 64 ( out [63:0] $end
$var wire 1 ) cout $end
$scope module u0 $end
$var wire 1 * cin $end
$var wire 64 + sum [63:0] $end
$var wire 1 ) cout $end
$var wire 64 , b [63:0] $end
$var wire 64 - a [63:0] $end
$upscope $end
$scope module u2 $end
$var wire 32 . a [31:0] $end
$var wire 32 / b [31:0] $end
$var wire 64 0 tmp_level1_6 [63:0] $end
$var wire 64 1 tmp_level1_7 [63:0] $end
$var wire 64 2 tmp_level2_4 [63:0] $end
$var wire 64 3 tmp_level2_5 [63:0] $end
$var wire 64 4 tmp_level4_2 [63:0] $end
$var wire 64 5 tmp_level4_1 [63:0] $end
$var wire 64 6 tmp_level4_0 [63:0] $end
$var wire 64 7 tmp_level3_3 [63:0] $end
$var wire 64 8 tmp_level3_2 [63:0] $end
$var wire 64 9 tmp_level3_1 [63:0] $end
$var wire 64 : tmp_level3_0 [63:0] $end
$var wire 64 ; tmp_level2_3 [63:0] $end
$var wire 64 < tmp_level2_2 [63:0] $end
$var wire 64 = tmp_level2_1 [63:0] $end
$var wire 64 > tmp_level2_0 [63:0] $end
$var wire 64 ? tmp_level1_5 [63:0] $end
$var wire 64 @ tmp_level1_4 [63:0] $end
$var wire 64 A tmp_level1_3 [63:0] $end
$var wire 64 B tmp_level1_2 [63:0] $end
$var wire 64 C tmp_level1_1 [63:0] $end
$var wire 64 D tmp_level1_0 [63:0] $end
$var wire 128 E result_level5_01 [127:0] $end
$var wire 128 F result_level4_01 [127:0] $end
$var wire 128 G result_level3_23 [127:0] $end
$var wire 128 H result_level3_01 [127:0] $end
$var wire 128 I result_level2_23 [127:0] $end
$var wire 128 J result_level2_01 [127:0] $end
$var wire 128 K result_level1_678 [127:0] $end
$var wire 128 L result_level1_345 [127:0] $end
$var wire 128 M result_level1_012 [127:0] $end
$var wire 64 N pp9 [63:0] $end
$var wire 64 O pp8 [63:0] $end
$var wire 64 P pp7 [63:0] $end
$var wire 64 Q pp6 [63:0] $end
$var wire 64 R pp5 [63:0] $end
$var wire 64 S pp4 [63:0] $end
$var wire 64 T pp3 [63:0] $end
$var wire 64 U pp2 [63:0] $end
$var wire 64 V pp10 [63:0] $end
$var wire 64 W pp1 [63:0] $end
$var wire 64 X pp0 [63:0] $end
$var wire 64 Y out2 [63:0] $end
$var wire 64 Z out1 [63:0] $end
$scope function FA_function $end
$var reg 128 [ result [127:0] $end
$var reg 64 \ x [63:0] $end
$var reg 64 ] y [63:0] $end
$var reg 64 ^ z [63:0] $end
$upscope $end
$scope module u_ppg $end
$var wire 32 _ a [31:0] $end
$var wire 32 ` b [31:0] $end
$var wire 64 a pp_tmp9 [63:0] $end
$var wire 64 b pp_tmp8 [63:0] $end
$var wire 64 c pp_tmp7 [63:0] $end
$var wire 64 d pp_tmp6 [63:0] $end
$var wire 64 e pp_tmp5 [63:0] $end
$var wire 64 f pp_tmp4 [63:0] $end
$var wire 64 g pp_tmp3 [63:0] $end
$var wire 64 h pp_tmp2 [63:0] $end
$var wire 64 i pp_tmp10 [63:0] $end
$var wire 64 j pp_tmp1 [63:0] $end
$var wire 64 k pp9 [63:0] $end
$var wire 64 l pp8 [63:0] $end
$var wire 64 m pp7 [63:0] $end
$var wire 64 n pp6 [63:0] $end
$var wire 64 o pp5 [63:0] $end
$var wire 64 p pp4 [63:0] $end
$var wire 64 q pp3 [63:0] $end
$var wire 64 r pp2 [63:0] $end
$var wire 64 s pp10 [63:0] $end
$var wire 64 t pp1 [63:0] $end
$var wire 64 u pp0 [63:0] $end
$scope module boothencode1 $end
$var wire 32 v b [31:0] $end
$var wire 32 w data [31:0] $end
$var wire 64 x pp9 [63:0] $end
$var wire 64 y pp8 [63:0] $end
$var wire 64 z pp7 [63:0] $end
$var wire 64 { pp6 [63:0] $end
$var wire 64 | pp5 [63:0] $end
$var wire 64 } pp4 [63:0] $end
$var wire 64 ~ pp3 [63:0] $end
$var wire 64 !" pp2 [63:0] $end
$var wire 64 "" pp10 [63:0] $end
$var wire 64 #" pp1 [63:0] $end
$var wire 64 $" pp0 [63:0] $end
$var wire 64 %" partial_product_minus4 [63:0] $end
$var wire 64 &" partial_product_minus3 [63:0] $end
$var wire 64 '" partial_product_minus2 [63:0] $end
$var wire 64 (" partial_product_minus1 [63:0] $end
$var wire 64 )" partial_product_4 [63:0] $end
$var wire 64 *" partial_product_3 [63:0] $end
$var wire 64 +" partial_product_2 [63:0] $end
$var wire 64 ," partial_product_1 [63:0] $end
$var wire 1 -" cout $end
$scope module u1 $end
$var wire 64 ." a [63:0] $end
$var wire 64 /" b [63:0] $end
$var wire 1 0" cin $end
$var wire 64 1" sum [63:0] $end
$var wire 1 -" cout $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 1"
00"
bx0 /"
bx ."
x-"
bx ,"
bx0 +"
bx *"
bx00 )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx000 t
bx000000000000000000000000000000 s
bx000000 r
bx000000000 q
bx000000000000 p
bx000000000000000 o
bx000000000000000000 n
bx000000000000000000000 m
bx000000000000000000000000 l
bx000000000000000000000000000 k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx0000000000000000000000000000 ^
bx0000000 ]
bx \
bx00000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx [
bx Z
bx00000000 Y
bx X
bx000 W
bx000000000000000000000000000000 V
bx000000 U
bx000000000 T
bx000000000000 S
bx000000000000000 R
bx000000000000000000 Q
bx000000000000000000000 P
bx000000000000000000000000 O
bx000000000000000000000000000 N
bx0000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx M
bx0000000000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx000000000 L
bx0000000000000000000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx000000000000000000 K
bx00000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx J
bx0000000000000000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0000000000000 I
bx000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx H
bx0000000000000000000000000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0000000000000000000 G
bx0000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx F
bx00000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx E
bx D
bx0000 C
bx000000000 B
bx0000000000000 A
bx000000000000000000 @
bx0000000000000000000000 ?
bx >
bx00000 =
bx0000000000000 <
bx0000000000000000000 ;
bx :
bx000000 9
bx0000000000000000000 8
bx0000000000000000000000000000 7
bx 6
bx0000000 5
bx0000000000000000000000000000 4
bx000000000000000000000000000000 3
bx000000000000000000000000000 2
bx000000000000000000000000000000 1
bx000000000000000000000000000 0
bx /
bx .
bx -
bx00000000 ,
bx +
0*
x)
bx (
bx '
bx00000000 &
bx %
bx $
bx #
bx "
bx !
$end
#10
b1111111100000 !
b1111111100000 (
b1111111100000 +
1)
b1111111111111111111111111111111111111111111111111110000000100000 W
b1111111111111111111111111111111111111111111111111110000000100000 t
b1111111111111111111111111111111111111111111111000001111111100000 '
b1111111111111111111111111111111111111111111111000001111111100000 -
b1111111111111111111111111111111111111111111111000001111111100000 Z
b1000000000000000000 &
b1000000000000000000 ,
b1000000000000000000 Y
b1111111111111111111111111111111111111111111111111111110000000100 j
b1111111111111111111111111111111111111111111111111111110000000100 #"
b10000000000000000001111111111111111111111111111111111111111111111000001111111100000 E
b1111111111111111111111111111111111111111111111100001111111100000 6
b100000000000000000 5
b1000000000000000001111111111111111111111111111111111111111111111100001111111100000 F
b0 8
b1111111111111111111111111111111111111111111111110001111111100000 :
b10000000000000000 9
b100000000000000001111111111111111111111111111111111111111111111110001111111100000 H
b0 <
b0 ;
b1111111111111111111111111111111111111111111111111001111111100000 >
b1000000000000000 =
b0 I
b10000000000000001111111111111111111111111111111111111111111111111001111111100000 J
b0 B
b0 A
b0 @
b0 ?
b0 4
b0 7
b1111111111111111111111111111111111111111111111111101111111100000 D
b100000000000000 C
b0 L
b0 K
b0 G
b1111111111111111111111111111111111111111111111111111110100000011 &"
b1000000000000001111111111111111111111111111111111111111111111111101111111100000 M
b10000000000000000001111111111111111111111111111111111111111111111000001111111100000 [
b0 ^
b100000000000000000 ]
b1111111111111111111111111111111111111111111111100001111111100000 \
b11111111000000 U
b11111111000000 r
b0 T
b0 q
b0 S
b0 p
b0 R
b0 o
b0 Q
b0 n
b0 P
b0 m
b0 O
b0 l
b0 2
b0 0
b0 N
b0 k
b0 3
b0 1
b0 V
b0 s
b1011111101 *"
b1011111101 1"
0-"
b1111111111111111111111111111111111111111111111111111111100000001 ("
b1111111111111111111111111111111111111111111111111111111000000010 '"
b1111111111111111111111111111111111111111111111111111110000000100 %"
b0 X
b0 u
b0 $"
b11111111 h
b11111111 !"
b0 g
b0 ~
b0 f
b0 }
b0 e
b0 |
b0 d
b0 {
b0 c
b0 z
b0 b
b0 y
b0 a
b0 x
b0 i
b0 ""
b11111111 ,"
b11111111 ."
b111111110 +"
b111111110 /"
b1111111100 )"
b100000 #
b100000 %
b100000 /
b100000 `
b100000 v
b11111111 "
b11111111 $
b11111111 .
b11111111 _
b11111111 w
#30
b1101111000 !
b1101111000 (
b1101111000 +
0)
b1101111000 '
b1101111000 -
b1101111000 Z
b0 &
b0 ,
b0 Y
b1101111000 E
b1101111000 6
b0 5
b1101111000 F
b1101111000 :
b0 9
b1101111000 H
b1101111000 >
b0 =
b1101111000 J
b11000 X
b11000 u
b11000 $"
b0 ^
b1101111000 D
b0 C
b1100000 W
b1100000 t
b1101111000 M
b1101111000 [
b0 ]
b1101111000 \
b1100 j
b1100 #"
b1100000000 U
b1100000000 r
b1100 h
b1100 !"
b1111111111111111111111111111111111111111111111111111111111011100 &"
b1111111111111111111111111111111111111111111111111111111111110100 ("
b100100 *"
b100100 1"
b1111111111111111111111111111111111111111111111111111111111101000 '"
b1111111111111111111111111111111111111111111111111111111111010000 %"
b1100 ,"
b1100 ."
b11000 +"
b11000 /"
b110000 )"
b1001010 #
b1001010 %
b1001010 /
b1001010 `
b1001010 v
b1100 "
b1100 $
b1100 .
b1100 _
b1100 w
#50
b100100000 !
b100100000 (
b100100000 +
b100100000 '
b100100000 -
b100100000 Z
b100100000 E
b100100000 6
b100100000 F
b100100000 :
b100100000 H
b100100000 >
b100100000 J
b100100000 W
b100100000 t
b100100000 D
b100100 j
b100100 #"
b100100000 M
b100100000 [
b0 ]
b100100000 \
b0 U
b0 r
b0 X
b0 u
b0 $"
b0 h
b0 !"
b11000 #
b11000 %
b11000 /
b11000 `
b11000 v
#70
1)
b10000000000000 &
b10000000000000 ,
b10000000000000 Y
b1000000000000 5
b100000000000 9
b10100000000 =
b1010100000 C
b1111111111111111111111111111111111111111111111111111111111010101 X
b1111111111111111111111111111111111111111111111111111111111010101 u
b1111111111111111111111111111111111111111111111111111111111010101 $"
b100101101 !
b100101101 (
b100101101 +
b1111111111111111111111111111111111111111111111111110000100101101 '
b1111111111111111111111111111111111111111111111111110000100101101 -
b1111111111111111111111111111111111111111111111111110000100101101 Z
b100000000000001111111111111111111111111111111111111111111111111110000100101101 E
b1111111111111111111111111111111111111111111111111111000100101101 6
b10000000000001111111111111111111111111111111111111111111111111111000100101101 F
b1111111111111111111111111111111111111111111111111111100100101101 :
b1000000000001111111111111111111111111111111111111111111111111111100100101101 H
b1111111111111111111111111111111111111111111111111111110000101101 >
b101000000001111111111111111111111111111111111111111111111111111110000101101 J
b1111111111111111111111111111111111111111111111111111111010001101 D
b10101000001111111111111111111111111111111111111111111111111111111010001101 M
b100000000000001111111111111111111111111111111111111111111111111110000100101101 [
b1000000000000 ]
b1111111111111111111111111111111111111111111111111111000100101101 \
b101011000 W
b101011000 t
b101011 j
b101011 #"
b1111111111111111111111111111111111111111111111111111111101111111 &"
b1111111111111111111111111111111111111111111111111111111111010101 ("
b10000001 *"
b10000001 1"
b1111111111111111111111111111111111111111111111111111111110101010 '"
b1111111111111111111111111111111111111111111111111111111101010100 %"
b101011 ,"
b101011 ."
b1010110 +"
b1010110 /"
b10101100 )"
b111 #
b111 %
b111 /
b111 `
b111 v
b101011 "
b101011 $
b101011 .
b101011 _
b101011 w
#90
b101011 X
b101011 u
b101011 $"
0)
b1111111111111111111111111111111111111111111111111111111011010011 !
b1111111111111111111111111111111111111111111111111111111011010011 (
b1111111111111111111111111111111111111111111111111111111011010011 +
b1111111111111111111111111111111111111111111111111111111011010011 '
b1111111111111111111111111111111111111111111111111111111011010011 -
b1111111111111111111111111111111111111111111111111111111011010011 Z
b0 &
b0 ,
b0 Y
b1111111111111111111111111111111111111111111111111111111011010011 E
b1111111111111111111111111111111111111111111111111111111011010011 6
b0 5
b1111111111111111111111111111111111111111111111111111111011010011 F
b1111111111111111111111111111111111111111111111111111111011010011 :
b0 9
b1111111111111111111111111111111111111111111111111111111011010011 H
b1111111111111111111111111111111111111111111111111111111011010011 >
b0 =
b1111111111111111111111111111111111111111111111111111111011010011 J
b1111111111111111111111111111111111111111111111111111111010000011 D
b1010000 C
b10100001111111111111111111111111111111111111111111111111111111010000011 M
b1111111111111111111111111111111111111111111111111111111011010011 [
b0 ]
b1111111111111111111111111111111111111111111111111111111011010011 \
b1111111111111111111111111111111111111111111111111111111010101000 W
b1111111111111111111111111111111111111111111111111111111010101000 t
b1111111111111111111111111111111111111111111111111111111111010101 j
b1111111111111111111111111111111111111111111111111111111111010101 #"
1-"
b10000001 &"
b101011 ("
b1111111111111111111111111111111111111111111111111111111101111111 *"
b1111111111111111111111111111111111111111111111111111111101111111 1"
b1010110 '"
b10101100 %"
b1111111111111111111111111111111111111111111111111111111111010101 ,"
b1111111111111111111111111111111111111111111111111111111111010101 ."
b1111111111111111111111111111111111111111111111111111111110101010 +"
b1111111111111111111111111111111111111111111111111111111110101010 /"
b1111111111111111111111111111111111111111111111111111111101010100 )"
b11111111111111111111111111010101 "
b11111111111111111111111111010101 $
b11111111111111111111111111010101 .
b11111111111111111111111111010101 _
b11111111111111111111111111010101 w
#1000
