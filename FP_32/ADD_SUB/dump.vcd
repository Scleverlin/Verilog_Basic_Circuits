$date
	Wed Nov 29 19:19:49 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_add_sub $end
$scope module fp32 $end
$var wire 32 ! add1 [31:0] $end
$var wire 32 " add2 [31:0] $end
$var wire 1 # command $end
$var wire 1 $ current_add $end
$var wire 8 % current_exponent_tmp [7:0] $end
$var wire 1 & current_sub $end
$var wire 8 ' max_shift [7:0] $end
$var wire 1 ( use_adder_or_not $end
$var wire 1 ) sticky_not_add $end
$var wire 26 * sticky_check [25:0] $end
$var wire 1 + sticky_add $end
$var wire 1 , sticky $end
$var wire 8 - shift [7:0] $end
$var wire 24 . rounding_man [23:0] $end
$var wire 1 / round $end
$var wire 8 0 reverse_e1_e2 [7:0] $end
$var wire 1 1 result_sign $end
$var wire 32 2 result [31:0] $end
$var wire 24 3 man_b_shift [23:0] $end
$var wire 24 4 man_b [23:0] $end
$var wire 24 5 man_a [23:0] $end
$var wire 1 6 guard $end
$var wire 26 7 final_man_tmp_2 [25:0] $end
$var wire 26 8 final_man_tmp [25:0] $end
$var wire 24 9 final_man_rounded [23:0] $end
$var wire 8 : final_exp [7:0] $end
$var wire 26 ; extent_b [25:0] $end
$var wire 26 < extent_a [25:0] $end
$var wire 8 = exponent_b [7:0] $end
$var wire 8 > exponent_a [7:0] $end
$var wire 1 ? exp_add $end
$var wire 9 @ e1_e2_tmp [8:0] $end
$var wire 8 A e1_e2 [7:0] $end
$var wire 1 B add_or_sub $end
$scope module adder $end
$var wire 26 C a [25:0] $end
$var wire 26 D b [25:0] $end
$var wire 26 E sum [25:0] $end
$var wire 1 B add_or_sub $end
$upscope $end
$scope module norm $end
$var wire 1 $ add $end
$var wire 32 F add1 [31:0] $end
$var wire 32 G add2 [31:0] $end
$var wire 1 & sub $end
$var wire 1 1 result_sign $end
$var wire 2 H mode [1:0] $end
$var wire 24 I man_b_tmp [23:0] $end
$var wire 24 J man_b [23:0] $end
$var wire 24 K man_a_tmp [23:0] $end
$var wire 24 L man_a [23:0] $end
$var wire 8 M exponent_b [7:0] $end
$var wire 8 N exponent_a [7:0] $end
$var wire 1 B add_or_sub $end
$var wire 1 O abs_a_ht_b $end
$scope module pre_processing $end
$var wire 32 P a [31:0] $end
$var wire 1 $ add $end
$var wire 32 Q b [31:0] $end
$var wire 1 & sub $end
$var wire 1 1 result_sign $end
$var wire 2 R mode [1:0] $end
$var wire 1 O abs_a_ht_b $end
$scope module mode_judge $end
$var wire 32 S a [31:0] $end
$var wire 1 $ add $end
$var wire 32 T b [31:0] $end
$var wire 1 & sub $end
$var wire 2 U mode [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module rounding $end
$var wire 1 6 guard $end
$var wire 24 V man [23:0] $end
$var wire 1 / round $end
$var wire 1 , sticky $end
$var wire 1 W tie $end
$var reg 1 ? exp_add $end
$var reg 24 X rounded_man [23:0] $end
$upscope $end
$scope module shifter $end
$var wire 26 Y data [25:0] $end
$var wire 8 Z max_shift [7:0] $end
$var wire 8 [ shift [7:0] $end
$var wire 8 \ shift_tmp2 [7:0] $end
$var wire 8 ] shift_tmp [7:0] $end
$var wire 26 ^ outdata [25:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx ^
b0xxxxx ]
bx \
bx [
bx Z
bx Y
bx X
xW
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
xO
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
b0xxxxxxxxxxxxxxxxxxxxxxxx0 D
b0xxxxxxxxxxxxxxxxxxxxxxxx0 C
xB
bx A
bx @
0?
bx >
bx =
b0xxxxxxxxxxxxxxxxxxxxxxxx0 <
b0xxxxxxxxxxxxxxxxxxxxxxxx0 ;
bx :
bx 9
bx 8
bx 7
x6
bx 5
bx 4
bx 3
bx 2
x1
bx 0
x/
bx .
bx -
x,
x+
bx *
x)
x(
bx '
x&
bx %
x$
x#
bx "
bx !
$end
#10
b100000000000000000000000 9
b100000000000000000000000 X
b100000000000000000000000 .
b100000000000000000000000 V
b10000000 :
b10000000000000000000000000 7
b10000000000000000000000000 ^
0W
b10 ]
0,
06
0/
1(
0+
b100000000000000000000000 8
b100000000000000000000000 E
b100000000000000000000000 Y
b0 *
b11001 0
b100000000000000000000000 ;
b100000000000000000000000 D
b10000000000000000000000 3
b1 A
b1 @
b1000000000000000000000000000000 2
01
0B
1)
b100000000000000000000000 4
b100000000000000000000000 J
b1000000000000000000000000 <
b1000000000000000000000000 C
b100000000000000000000000 5
b100000000000000000000000 L
b10 -
b10 [
b10 \
b100000000000000000000000 I
b100000000000000000000000 K
b10000000 '
b10000000 Z
b10000000 %
b10000000 =
b10000000 M
b10000001 >
b10000001 N
b1 H
b1 R
b1 U
1O
1&
0$
0#
b1000000000000000000000000000000 "
b1000000000000000000000000000000 G
b1000000000000000000000000000000 Q
b1000000000000000000000000000000 T
b1000000100000000000000000000000 !
b1000000100000000000000000000000 F
b1000000100000000000000000000000 P
b1000000100000000000000000000000 S
#20
b110000000000000000000000 9
b110000000000000000000000 X
b110000000000000000000000 .
b110000000000000000000000 V
b1000000110000000000000000000000 2
b10000001 :
b11000000000000000000000000 7
b11000000000000000000000000 ^
b1 -
b1 [
b1 \
b1 ]
b1100000000000000000000000 8
b1100000000000000000000000 E
b1100000000000000000000000 Y
1B
b0 H
b0 R
b0 U
0&
1$
1#
#30
16
1+
b10001011101000000000000000 *
b100000000101001011000110 9
b100000000101001011000110 X
1,
b100000000101001011000101 .
b100000000101001011000101 V
1(
b10000000010100101100010100 7
b10000000010100101100010100 ^
b1000000001010010110001010 8
b1000000001010010110001010 E
b1000000001010010110001010 Y
b100000001001100010111010 4
b100000001001100010111010 J
b1000000001001010101111000 <
b1000000001001010101111000 C
b100000000100101010111100 5
b100000000100101010111100 L
b1001000000000000101001011000110 2
b10010000 :
b1110 0
b1000000010010 ;
b1000000010010 D
b100000001001 3
b1100 A
b100000001001100010111010 I
b100000000100101010111100 K
b10000100 '
b10000100 Z
b10000100 %
b10000100 =
b10000100 M
b1100 @
b10010000 >
b10010000 N
0O
b1001000000000000100101010111100 "
b1001000000000000100101010111100 G
b1001000000000000100101010111100 Q
b1001000000000000100101010111100 T
b1000010000000001001100010111010 !
b1000010000000001001100010111010 F
b1000010000000001001100010111010 P
b1000010000000001001100010111010 S
#40
b100000000110001000001111 9
b100000000110001000001111 X
b100000000110001000001111 .
b100000000110001000001111 V
06
b10000000011000100000111100 7
b10000000011000100000111100 ^
b1000000001100010000011110 8
b1000000001100010000011110 E
b1000000001100010000011110 Y
b101110101001100010111010 4
b101110101001100010111010 J
b10111010000000000000000 *
b1111 0
b10111010100110 ;
b10111010100110 D
b1011101010011 3
b1011 A
b1001000000000000110001000001111 2
b10010000 :
b101110101001100010111010 I
b1011 @
b10000101 '
b10000101 Z
b10000101 %
b10000101 =
b10000101 M
b1000010101110101001100010111010 !
b1000010101110101001100010111010 F
b1000010101110101001100010111010 P
b1000010101110101001100010111010 S
#50
b100000000110001000001111 9
b100000000110001000001111 X
b100000000110001000001111 .
b100000000110001000001111 V
1(
1+
b10000000011000100000111100 7
b10000000011000100000111100 ^
b1000000001100010000011110 8
b1000000001100010000011110 E
b1000000001100010000011110 Y
b101110101001100010111010 4
b101110101001100010111010 J
b1000000001001010101111000 <
b1000000001001010101111000 C
b100000000100101010111100 5
b100000000100101010111100 L
b1001000000000000110001000001111 2
b10010000 :
b10111010000000000000000 *
b1111 0
b10111010100110 ;
b10111010100110 D
b1011101010011 3
b1011 A
b101110101001100010111010 I
b100000000100101010111100 K
b10000101 '
b10000101 Z
b10000101 %
b10000101 =
b10000101 M
b1011 @
b10010000 >
b10010000 N
1O
1&
0$
0#
b1001000000000000100101010111100 !
b1001000000000000100101010111100 F
b1001000000000000100101010111100 P
b1001000000000000100101010111100 S
b11000010101110101001100010111010 "
b11000010101110101001100010111010 G
b11000010101110101001100010111010 Q
b11000010101110101001100010111010 T
#60
b0 -
b0 [
b0 \
b0 ]
b110000000001000000000000 9
b110000000001000000000000 X
0,
b110000000001000000000000 .
b110000000001000000000000 V
0+
b110000000000000000000001 4
b110000000000000000000001 J
b1100000000100000000000000 <
b1100000000100000000000000 C
b110000000010000000000000 5
b110000000010000000000000 L
b10000000 :
b0 *
b11010 0
b1100000000000000000000010 ;
b1100000000000000000000010 D
b110000000000000000000001 3
b0 A
b11000000000100000000000010 7
b11000000000100000000000010 ^
b11000000000100000000000010 8
b11000000000100000000000010 E
b11000000000100000000000010 Y
b110000000000000000000001 I
b110000000010000000000000 K
b1111111 '
b1111111 Z
b1111111 %
b1111111 =
b1111111 M
b0 @
b1111111 >
b1111111 N
1B
0O
b1000000010000000001000000000000 2
01
b0 H
b0 R
b0 U
0&
b111111110000000010000000000000 "
b111111110000000010000000000000 G
b111111110000000010000000000000 Q
b111111110000000010000000000000 T
b111111110000000000000000000001 !
b111111110000000000000000000001 F
b111111110000000000000000000001 P
b111111110000000000000000000001 S
1$
1#
#70
b10 -
b10 [
b10 \
b10 ]
b101000000000000000000000 9
b101000000000000000000000 X
b101000000000000000000000 .
b101000000000000000000000 V
b10100000000000000000000000 7
b10100000000000000000000000 ^
b101000000000000000000000 8
b101000000000000000000000 E
b101000000000000000000000 Y
0B
b1010000000000000000000000 ;
b1010000000000000000000000 D
b101000000000000000000000 3
b101000000000000000000000 4
b101000000000000000000000 J
b1111000000000000000000000 <
b1111000000000000000000000 C
b111100000000000000000000 5
b111100000000000000000000 L
b10000010 :
1O
b1000001001000000000000000000000 2
01
b101000000000000000000000 I
b111100000000000000000000 K
b10000011 '
b10000011 Z
b10000011 %
b10000011 =
b10000011 M
b0 @
b10000011 >
b10000011 N
b1 H
b1 R
b1 U
1&
b1000001101000000000000000000000 "
b1000001101000000000000000000000 G
b1000001101000000000000000000000 Q
b1000001101000000000000000000000 T
b1000001111100000000000000000000 !
b1000001111100000000000000000000 F
b1000001111100000000000000000000 P
b1000001111100000000000000000000 S
0$
0#
#270
